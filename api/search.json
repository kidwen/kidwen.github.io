[{"id":"67a0811293cd2bc9df0f8e11e20e867f","title":"angular v16 signal api 介绍","content":"本文介绍 Angular signal库的 API 接口和一些实现细节。\nsignal在Angular中是一种具有明确变更语义的值。在 Angular 中，signal通过一个零参数的getter函数来表示，该函数返回当前signal的值。\n在这个getter函数中会使用 SIGNAL 符号进行标记，这样Angular框架就能够识别它是一个signal，并且可以应用一些内部的优化措施来提升性能。\nsignal是只读的，意味着我们可以获取当前signal的值，但不能直接修改它。我们可以观察signal的变化通知，以便在值发生变化时做出相应的处理。这种只读的特性使得signal在响应式编程中非常有用，因为它们可以用于实现数据的观察和响应。\n这个getter函数被用于获取当前signal的值，并在响应式编程的上下文中记录signal的读取操作。这个操作对于构建响应式依赖图来说非常关键。在 Angular 中，响应式依赖图用于追踪数据的依赖关系，当依赖的数据发生变化时，相关的部分会得到更新。这种机制使得 Angular 能够高效地处理数据的变化和重新渲染视图。\n在响应式上下文之外，我们仍然可以对signal进行读取操作。这使得非响应式的代码（比如现有的、来自第三方的库）可以随时读取signal的值，而无需了解signal的响应式特性。这种设计使得signal可以在现有的代码中轻松地使用，而不需要对现有代码做任何修改。\ninterface Signal&lt;T> &#123;\n    (): T;\n    [SIGNAL]: unknown;\n&#125;\n\nWritable signalsAngular signals库将提供可写signal的默认实现，可以通过内置的修改方法（set、update、mutate）进行更改：\ninterface WritableSignal&lt;T> extends Signal&lt;T> &#123;\n    /**\n     * 我们可以直接使用设置方法（set）将`signal`的值设置为一个新的值。\n     * 当`signal`的值发生变化，它会自动通知所有依赖于这个`signal`的部分，从而触发相应的更新。\n     * 这种自动通知机制是响应式编程的核心，它确保了数据的一致性和同步，使得我们能够有效地处理数据的变化，并及时反映到界面上。\n     *\n     * 使用可写`signal`的 set 方法在以下情况下非常有用：\n     * 1. 当我们需要更改原始值（例如数字、字符串等）时，直接使用 set 方法可以非常方便地更新`signal`的值。\n     * 2. 当新值与旧值之间没有依赖关系时，也就是说，新值不依赖于旧值的任何信息，我们可以直接使用 set 方法替换整个数据结构。\n     */\n    set(value: T): void;\n\n    /**\n     * 使用可写`signal`的 update 方法可以基于当前`signal`的值进行更新。\n     * 你可以提供一个更新函数，该函数将根据当前`signal`的值计算新的值，并将新值应用到`signal`上。\n     * 当`signal`的值发生变化，它会自动通知所有依赖于这个`signal`的部分，从而触发相应的更新。\n     * 使用 update 方法可以非常方便地对`signal`的值进行递增、递减或应用其他自定义的计算逻辑。\n     * 这使得数据的更新更加灵活和自由，同时保持了响应式编程的特性，确保数据的一致性和同步。\n     * \n     * 1. 当我们需要设置一个新值，而这个新值依赖于旧值时，可以使用 update 方法。\n     * 例如，我们要对一个不可变的数据结构进行更新，可以通过提供一个更新函数来计算新的数据结构，并将其应用到`signal`上。\n     * 2. 在不可变的数据结构中，我们不能直接修改已有的数据，而是需要创建一个新的数据结构来表示修改后的结果。\n     * 使用 update 方法可以方便地进行这样的操作，而不需要手动处理数据的复制和更新。\n     */\n    update(updateFn: (value: T) => T): void;\n\n    /**\n     * 使用可写`signal`的 mutate 方法可以直接在当前值上进行修改。\n     * 你可以提供一个修改函数，该函数将在当前值上进行原地修改，并将修改后的值应用到`signal`上。\n     * 当`signal`的值发生变化，它会自动通知所有依赖于这个`signal`的部分，从而触发相应的更新。\n     * 使用 mutate 方法可以方便地进行直接修改数据的操作，而不需要创建新的数据结构。\n     * 这对于某些特定的场景和数据结构的处理非常有帮助。\n     * 需要注意的是，这种方法是在原地修改数据，因此在使用时需要谨慎，确保不会导致数据的不一致或错误。\n     * \n     * 使用可写`signal`的 mutate 方法在以下情况下非常有用：\n     * 1. 当我们需要对`signal`的值进行内部修改，而不改变`signal`本身的引用（即身份）时，可以使用 mutate 方法。\n     * 例如，我们可以通过提供一个修改函数，在`signal`中存储的数组上添加新元素，而不需要创建一个新的数组，从而保持`signal`的引用不变。\n     * 1. mutate 方法可以用于原地修改`signal`的值，而不需要重新分配内存或创建新的数据结构，\n     * 这在一些性能敏感的情况下很有用。\n     */\n    mutate(mutatorFn: (value: T) => void): void;\n\n    /**\n     * 我们可以通过某种方式从一个可写`signal`派生出一个新的`signal`，这个新`signal`是只读的，即不能修改它的值。\n     * 这个只读`signal`仍然可以访问原始可写`signal`的值，但不允许对原始`signal`的值进行修改。\n     * \n     * 这种操作在某些场景下很有用，比如我们希望将一个可写`signal`暴露给其他部分，但不希望其他部分对该`signal`进行修改，以保持数据的一致性和可控性。\n     * 通过返回一个非可写`signal`，我们可以确保原始`signal`的值只能在特定的上下文中被修改，而其他地方只能读取它的值。\n     */\n    asReadonly(): Signal&lt;T>;\n&#125;\n\n我们可以通过调用signal的创建函数来创建一个可写signal实例。在 Angular 中，这个signal创建函数通常是指从 @angular/core 模块中导入的 createSignal 函数。通过调用这个函数，我们可以创建一个新的signal实例，这个signal实例可以用于存储和管理数据，并允许在需要时进行设置或更新。这样的signal实例通常是可写的，我们可以使用 set、update 或 mutate方法来改变它的值。\nfunction signal&lt;T>(\n  initialValue: T,\n  options?: &#123;equal?: (a: T, b: T) => boolean&#125;\n): WritableSignal&lt;T>;\n示例：\n// 创建一个可写 signal\nconst counter = signal(0);\n\n// 为 signal 设置新的值, 完全替换当前值\ncounter.set(5);\n\n// 基于当前值更新 signal 的值\ncounter.update(currentValue => currentValue + 1);\n在 Angular 中，Signal和WritableSignal的接口命名通常遵循以下命名约定：\nSignal 作为主要接口的命名，并且这个接口表示一个只读的值随时间变化。为 Signal 这个主要接口选择这个名称是因为其简短、易于发现，并且预计它会成为最常见的被导入和使用的接口。\n另一方面，WritableSignal 是一个相对特殊化的接口，它在名称中添加了 writable 表示在这些类型的signal上允许进行额外的操作，即允许对其值进行修改。\n这样的命名方案旨在提供清晰简洁的名称，使得开发者在使用该库时能够轻松区分只读signal和可写signal，并根据实际需求选择正确的接口。\nEqualityIt is possible to, optionally, specify an equality comparator function. If the equality function determines that 2 values are equal, and if not equal, writable signal implementation will:\n\nblock update of signal’s value\nskip change propagation.\n\n默认情况下，当signal中的值为原始值（例如数字、字符串等）时，使用 === 来比较它们的相等性。如果新旧值相等，变更通知将被跳过，不会触发变更事件。但是，当signal中的值为对象或数组时，相等比较器函数将始终视它们为不相等，即使它们的内容相同也不会被认为是相等的。\n这样的默认行为允许signal存储和传播非原始值（例如对象、数组），即使对象或数组的内容没有实际改变，只要其引用发生了变化，signal仍然可以触发变更通知。这样可以确保signal对非原始值的处理更加灵活和准确，而不仅仅依赖于值的内容是否发生变化。\nconst todos = signal&lt;Array&lt;Todo>>([&#123;todo: 'Open RFC', done: true&#125;]);\n\n// 我们可以更新列表，即使没有使用不可变数据，仍然触发变更通知。\ntodos.update(todosList => &#123;\n    todosList.push(&#123;todo: 'Respond to RFC comments', done: false&#125;);\n    return todoList;\n&#125;);\nsignal概念的实现并不限于特定的方式。无论是Angular还是第三方库，都可以创建定制的signal实现，只要它们保持了与signal相关的底层契约（也就是接口和功能）不变即可。\n这种灵活性允许开发者根据自己的需求和场景来创建符合特定要求的signal实现。无论使用哪种实现方式，只要它们遵循signal的基本规则和契约，就能在Angular应用中实现类似的signal功能，并在需要时触发变更通知和响应式处理。这样的设计有助于推动模块化和可扩展性，让开发者能够更好地适应不同的业务需求。\n.set 是signal的基本操作，.update 是一个方便的方法。虽然signal的 API 表面上提供了三种不同的方法来改变signal的值，但实际上，.set(newValue) 是库中唯一需要的基本操作。这是设置signal值的主要方法，其他两种方法.update 和 .mutate 只是提供了更方便的方式来进行signal值的更新，其功能可以通过调用 .set 来实现。\n使用 .update 方法可以根据当前signal的值计算新的值并进行更新，而使用 .mutate 方法可以在当前值上进行原地修改。但这两种方法在功能上可以等效为使用 .set 方法，因为它们都是对signal的值进行更新。因此，.set 是signal库中唯一需要的基本操作，而其他两种方法只是在使用上更加便利和语法上更加简洁的方式。\n// 创建一个可写 `signal`\nconst counter = signal(0);\n\n// 基于当前值更新 `signal` 的值\ncounter.update(c => c + 1);\n\n// 相同功能可以不使用 .update, 而是 .set\ncounter.set(counter.get() + 1);\n尽管所有的操作都可以仅通过使用 .set 来完成，但在某些特定的使用情况下，使用 .update 会更加方便和简洁，因此它被添加到了公共 API 中。\n虽然 .set 是signal的基本操作，允许直接设置signal的值，但在某些场景中，使用 .update 更加方便，因为它允许我们提供一个更新函数，根据当前signal的值计算新的值并进行更新，从而使代码更加简洁和灵活。因此，尽管 .set 是必需的基本操作，.update 作为一种方便的操作也被引入到了公共 API 表面，以满足不同的使用需求。\n.mutate 用于就地更改值.mutate 方法的用途。.mutate 方法允许我们通过直接在signal值上进行原地修改来改变signal的值。这种操作主要适用于signal持有的值是非原始 JavaScript 值，例如数组或对象。\n例如，我们可以使用 .mutate 方法来对一个数组signal进行原地修改，比如向数组中添加元素、删除元素或对元素进行修改，而不是通过创建新的数组来实现。这样的原地修改在某些情况下可以提供更高的性能和效率，尤其是当signal值较大或需要频繁修改时。\n总的来说，.mutate 方法是一种用于在signal中原地修改值的方便方法，适用于非原始值的signal，如数组或对象。\nconst todos = signal&lt;Todo[]>([&#123;todo: 'Open RFC', done: true&#125;]);\n\n// 我们可以更新列表，即使没有使用不可变数据，仍然触发变更通知。\ntodos.mutate(todosList => &#123;\n    todosList.push(&#123;todo: 'Respond to RFC comments', done: false&#125;);\n&#125;);\n.mutate 方法的特点。无论signal使用何种自定义的相等性检查，.mutate 方法始终会触发变更通知。这意味着，即使修改了signal的值但未触发自定义相等性检查，仍会发送变更通知，确保其他依赖于signal的部分能够得到更新。\n通过使用 .mutate 方法和默认的相等比较器函数，signal库可以同时处理可变和不可变的数据。这使得signal在处理数据时更加灵活，无需局限于特定的数据处理方式。这样的设计决策有助于保持灵活性，让开发者可以根据具体场景选择最合适的数据处理方式，无论是可变数据还是不可变数据。\n读&#x2F;写分离signal库的设计选择。在该库中，主要的响应式基元是 Signal 类型，而且它是只读的。这意味着可以使用signal传播响应式的值给其他组件或订阅者，但是这些消费者不能直接修改signal的值。\n这样的设计可以带来一些好处。首先，它确保了响应式数据的单向流动，防止不必要的数据修改。其次，它增强了代码的可维护性和可预测性，因为只有特定的组件或服务可以修改signal的值，其他消费者只能读取数据。这种封装性使得代码更加健壮，并减少了潜在的副作用和数据冲突。\n通过将signal的读写能力分开，signal库鼓励在应用程序中采用良好的数据流架构模式。具体来说，signal库通过将signal设计为只读的 Signal&lt;T&gt; 类型和可写的 WritableSignal&lt;T&gt; 类型，使得对状态的修改必须通过持有 WritableSignal 的所有者来进行，而不能在应用程序的任意地方进行修改。\nGetter 方法在 Angular 中选择的实现中，signal是通过 getter 函数来表示的。以下是使用这种 API 的一些优点：\n\n它是内置的 JavaScript 结构，这使得signal的读取在 TypeScript 代码和模板表达式之间保持一致。\n它明确指示了signal的主要操作是读取（read）。\n它清楚地表明了不仅仅是简单的属性访问在发生。\n它的语法非常轻量级，因为读取signal是一个非常常见的操作。\n\ngetter 函数的缺点\n\n\n\n\n\n\n\n\n模板中的函数调用\n在 Angular 中，模板中的函数调用会触发组件的变更检测机制，而这个机制在频繁调用时可能会导致性能问题。因此，开发者通常会避免在模板中调用复杂或计算密集型的函数。\n但是，signal的 getter 函数是高效的访问器，它们执行的计算工作非常少。signal的 getter 函数通常只是返回signal的当前值，并不包含复杂的逻辑。因此，频繁调用signal的 getter 函数并不会引起性能问题，开发者无需担心在模板中使用signal的 getter 函数。\n这样的设计使得signal在 Angular 中成为一种高效和方便的方式来处理数据和状态，并可以在模板中直接使用，而不会导致性能上的问题。\n与类型缩窄的交互在代码中\nif (user.name()) &#123;\n  console.log(user.name().first); // 由于ts不能知道每次方法调用是否会返回相同的值所以此处会报错\n&#125;\n可以如下解决\nconst name = user.name();\nif (name) &#123;\n  console.log(name.first);\n&#125;\n但是在模版中没有办法声明中间变量（可以自动创建此类变量来解决此类问题）。\nComputed signals类似于 vue 计算属性\nconst counter = signal(0);\n\nconst isEven = computed(() => counter() % 2 === 0);\n\nconst color = computed(() => isEven() ? 'red' : 'blue');\n签名类型：\nfunction computed&lt;T>(\n  computation: () => T,\n  options?: &#123;equal?: (a: T, b: T) => boolean&#125;\n): Signal&lt;T>;\n\n与可写signal类似，计算signal可以（可选）指定等式函数。当提供时，如果确定两个值相等，则相等函数可以停止更深层次依赖链的重新计算。示例（默认相等）：\nconst counter = signal(0);\n\nconst isEven = computed(() => counter() % 2 === 0);\n\nconst color = computed(() => isEven() ? 'red' : 'blue');\n\n// 提供一个不同的复数值给 counter 意味着：\n// - isEven 重新计算（因为依赖值发生变化）\n// - color 不需要重新计算（因为isEvent()值没有发生变化）\ncounter.set(2);\n\nsignal在计算功能上所做的算法选择，并提供了这种实现的一些强大保证：\n\n延迟执行：计算函数只有在有人读取其值时才会被执行。这样可以避免不必要的计算开销，只有在需要计算值时才进行实际的计算操作。\n自动清理：一旦计算signal的引用超出作用域，它会自动成为垃圾回收的对象。这意味着不需要开发者显式地进行计算的清理操作，signal库会自动处理资源的释放。\n无故障执行：计算保证在依赖项发生变化时，只会执行最少次数的计算。这样可以避免计算过程中使用过时或中间状态的依赖值，从而确保计算的准确性和一致性。这种无故障执行机制也免除了需要显式执行“事务”或“批处理”操作的需求。\n\n在条件计算中，计算型signal可能根据读取的其他signal的不同值进行不同的计算。当计算型signal的计算过程中读取了其他signal时，它会将这些signal添加到自己的依赖集合中。如果后续这些依赖signal的值发生了变化，计算型signal会相应地知道自己需要重新计算，以确保计算的正确性。\n// 如果 `showName` `signal`发生变化，问候语将始终被重新计算，但如果 `showName` 为 `false`，则名称`signal`不是问候语的依赖项，也不会导致其重新计算。\nconst greeting = computed(() => showName() ? `Hello, $&#123;name()&#125;!` : 'Hello!');\n\nEffectsEffect 是一种带有副作用的操作，它会读取一个或多个signal的值，并在任何这些signal发生变化时自动调度重新运行该操作。\n当一个 effect 被创建时，它会读取指定的signal的值，并在这些signal的值发生变化时自动触发重新运行。这样的设计使得 effect 能够对signal的变化作出相应的反应，并执行相应的副作用操作。\n例如，在一个 effect 中可以监听用户输入的变化signal和网络请求结果signal，一旦这些signal的值发生变化，effect 就会自动调度重新运行，执行与之相关的副作用操作，如更新界面或发起新的网络请求。\n一个 effect 的基本 API 具有以下签名：\nfunction effect(\n  effectFn: (onCleanup: (fn: () => void) => void) => void,\n  options?: CreateEffectOptions\n): EffectRef;\n使用：\nconst firstName = signal('John');\nconst lastName  = signal('Doe');\n\n// 这个 effect 会打印两个名字，也会在两个 signal 发生变化时自动打印\neffect(() => console.log(firstName(), lastName()));\nEffects 在应用程序中有多种用途，包括但不限于：\n\n同步多个独立模型之间的数据：当应用程序中存在多个独立的数据模型时，可能需要在它们之间保持数据同步。通过创建适当的effect，可以监听这些模型的变化并在数据发生变化时进行同步操作，从而确保各个模型之间的数据始终保持一致。\n触发网络请求：在应用程序中，常常需要根据用户的交互或其他条件触发网络请求，从而获取或更新数据。通过创建一个监听signal变化的 effect，可以在signal满足特定条件时自动发起网络请求，实现数据的获取和更新。\n执行渲染操作：在应用程序中，当数据发生变化时，需要将这些变化反映在界面上，以更新用户所见的内容。通过创建监听signal变化的 effect，可以在数据发生变化时自动执行渲染操作，更新界面，从而实现反应式的用户界面。\n除了上述的用例，Effect 还可以用于处理其他类型的副作用操作，如日志记录、权限控制、动画触发等。通过将这些副作用操作封装在 effect 中，可以实现代码的模块化和可维护性，并确保副作用操作的执行时机和正确性。\n\nEffect 函数可以选择性地注册一个清理函数。如果注册了清理函数，在下次 effect 运行之前，清理函数将被执行。清理函数可以用于“取消”之前的 effect 运行可能已经开始的任何工作。\neffect((onCleanup) => &#123;\n    const countValue = this.count();\n\n    let secsFromChange = 0;\n    const id = setInterval(() => &#123;\n      console.log(\n        `$&#123;countValue&#125; had its value unchanged for $&#123;++secsFromChange&#125; seconds`\n      );\n    &#125;, 1000);\n\n    onCleanup(() => &#123;\n      console.log('Clearing and re-scheduling effect');\n      clearInterval(id);\n    &#125;);\n&#125;);\n\neffects 调度时机在 Angular Signals 中，effect 必须在更改signal的操作完成后执行。\n考虑到 effect 的多种用例，存在各种可能的执行时间。因此，实际的 effect 执行时间不能保证，Angular 可能选择不同的策略。应用程序开发者不应依赖于任何观察到的执行时间。唯一可以保证的是：\n\neffect 将至少执行一次；\neffect 将在未来某个时刻响应其依赖项的变化而执行；\neffect 将最小化执行次数：如果一个 effect 依赖于多个signal，并且其中几个signal同时发生变化，只会调度一次 effect 执行。\n\neffect 执行的不确定性和最小化执行次数的保证。由于 effect 可能用于各种不同的场景，其执行时间可能会有很大的变化。Angular 并不保证 effect 的执行时间，可能会根据不同的情况选择不同的执行策略。\n虽然 effect 的执行时间不确定，但是 Angular 保证了上述的三个行为：effect 将至少执行一次，将在未来某个时刻响应其依赖项的变化而执行，并且在多个依赖项同时变化时最小化执行次数，只调度一次 effect 执行。这些保证使得 effect 的行为在合理范围内可预测，并且有助于提高应用程序的性能和可维护性。\n停止 effectsEffect 在被创建后，会根据其依赖项的变化被自动调度运行，以响应数据的变化。这使得 effect 始终保持活动状态，并随时准备处理数据的变化。然而，这种“无限”生命周期并不是我们所期望的，因为 effect 应该在合适的时候进行关闭，以避免不必要的计算和资源浪费。\n为了解决这个问题，Angular 提供了一种机制来管理 effect 的生命周期，并在适当的时候关闭它们。通常情况下，effect 会在 Angular 组件或服务的生命周期结束时自动关闭。例如，当一个组件被销毁时，与该组件相关的 effect 也会被关闭。这样，我们可以确保在不再需要 effect 时，它们会被及时关闭，避免了不必要的计算和资源占用。\nAngular 的 effect 生命周期与组件或服务的销毁相关联。当一个组件或服务被销毁时，与之相关的 effect 也会被关闭，以确保它们不再执行任何副作用操作。\n在 Angular 中，组件和服务通常都会实现 OnDestroy 接口，该接口包含一个 ngOnDestroy() 方法，用于在组件或服务被销毁时进行一些清理操作。effect 会尝试注入当前组件或服务的 DestroyRef 实例，并在 ngOnDestroy() 方法中注册其停止函数。\n通过在 ngOnDestroy() 方法中注册 effect 的停止函数，我们可以确保 effect 在组件或服务被销毁时正确地进行关闭和清理。这样的设计使得 effect 能够与组件或服务的生命周期保持一致，并在合适的时候自动关闭，避免了可能出现的内存泄漏和资源浪费。\n对于需要更多对生命周期范围控制的情况，可以选择性地在创建 effect 时传递 manualCleanup 选项：\n// 如果设置了此选项，即使创建它的组件/指令被销毁，效果也不会自动销毁。\neffect(() => &#123;...&#125;, &#123;manualCleanup?: boolean&#125;);\n可以使用效果创建函数返回的 EffectRef 实例显式停止&#x2F;销毁效果：\n// 创建 effect 并记录 effectRef\nconst effectRef = effect(() => &#123;...&#125;);\n\n// 显式停止/销毁此 effect\neffectRef.destroy();\n\nEffects 写入 signals不允许从 effect 中直接写入signal。Effect 函数用于处理副作用操作和响应式数据流的处理，其主要目的是读取signal并触发副作用操作，而不是用于写入signal的值。\n直接从 effect 中写入signal可能导致数据流的不稳定和难以跟踪的问题。例如，如果一个 effect 写入了一个signal的值，而该signal又被其他 effect 读取，可能会导致循环依赖和无限循环的问题。这样的数据流是难以理解和调试的，可能导致应用程序的不稳定性和性能问题。\n为了保持数据流的可靠性和可维护性，Angular 的设计决策是阻止在 effect 中直接写入signal。如果开发者尝试在 effect 中写入signal，Angular 将报告错误并阻止这样的操作。\n这种默认表现可以被配置项的allowSignalWrites覆盖。更建议使用计算signal。\nconst counter = signal(0);\nconst isBig = signal(false);\n\neffect(() => &#123;\n    if (counter() > 5) &#123;\n        isBig.set(true);\n    &#125; else &#123;\n        isBig.set(false);\n    &#125;      \n&#125;, &#123;allowSignalWrites: true&#125;);\n","slug":"frontend/angular-signal-api","date":"2023-07-21T08:00:00.000Z","categories_index":"FRONTEND","tags_index":"angular","author_index":"Kidwen"},{"id":"a7b5aeb1d279a19d567b0b432761bc79","title":"angular v16 signal 介绍","content":"2023年05月03日，angular v16 正式发布。此次更新添加了Signals作为angular新的响应单元(reactive primitive)。angular的响应式系统依赖于zone.js。但是zone.js对于模型的变更没有提供更细粒度的信息通知。zone.js只能够通知到angular程序中什么时候某些东西可能发生了改变，但是没有给到更多的信息关于发生了什么或者什么东西改变了。这代表着以后的某个版本zone.js将被移除。\nSignals 定义Signals 是值的包装，它能够在值发生变更的时候通知到相应的消费者。Signals 有多种类型。\n一些 Signals 可以通过 mutation Api 直接改变值，这些被称为 writable signals。模型的变更总是通过更改一个或者多个writable signals。\n由于读取signal是通过getter而不是访问普通变量或者值，所以signal可以知道他们在哪里被读取了。而且突变总是通过mutation Api完成的，所以Signals知道什么时候发生变更，并通知消费者有关变更的信息。\n\n\n\n\n\n\n\n\n\nSignals 特性\n能够通知 Angular 有关影响各个组件的模型更改。\n能够提供对模型的同步访问。\n读取值的时候无副作用。\n_glitch fre_e：读取值永远不应该返回不一致的状态。\n依赖性跟踪应该符合工程学。\n\n\n\n\n\n\n\n\n\n\nSignals 优点\n框架可以追踪模板中访问了那些signals，可以获取关于哪些组件被模型中的数据改变所影响的更细粒度的信息。\nSignals 可以同步获取到他们的值。\n读值不会造成副作用。\n现代Signals实现是无故障的，并且不会向用户暴露不一致的状态。\nSignals实现可以自动跟踪依赖关系。\nSignals可以在任何地方使用，而不仅仅是在组件中，这与 Angular 的依赖注入系统配合得很好。\n计算Signals可以是lazy，并且仅根据需要重新计算中间值。\n开发人员需要学习的概念相对较少。\n它们很容易与其他反应性系统组合，包括 RxJS 和 Angular 当前基于区域的反应性。\n\nComputedcomputed signal 不能直接改变，而是根据其他sinals的变化而变更，（类比vue的计算属性）。\nEffects当 Signals 发生变更后会通知消费者，当signals发生变更后执行的操作称为effect。例如当组件模板中的使用的signals发生变更时，angular会通过effect更新视图ui。\nAutomatic Dependency Tracking当computed signals 和effect运行时，它们会跟踪哪些signals被读取作为computed或effect函数的一部分。了解依赖关系允许signal系统在任何Signals依赖关系发生变化时自动重新运行computation或effect函数。\nSignals 集成\n\n\n\n\n\n\nWARNING\n由于zone.js和 signals基于不同的数据在应用程序中流经的不同的假设，而且使用zone.js编写的代码如果没有zone.js可能会无法运行。所以暂时不会移除zone.js，而是共存。\n\n\n\n\n\n\n\n\n\n\nSignals 将会影响 angular 多个地方数据流和模型同步变更检查过程组件生命周期框架产生的响应式数据（例如：@Input）\n与 zone.js 不同，Signals提供有关模型的哪些部分已更改的细粒度信息，基于Signals的组件不参与全局更改检测。相反，Angular 知道组件模板的不同部分使用了哪些Signals，并且仅在Signals更改时将该组件与 DOM 同步。当且仅当模板中读取的Signals通知 Angular 它已更改时，才会安排组件的更改检测。事实上，在当前的设计中，这种更改检测将针对组件内的每个视图独立发生。\nSignal-based 组件使用组件作为反应性系统之间的边界将允许应用程序开发人员逐渐选择在现有应用程序中发出反应性signal，并允许库作者将其库转换为以向后兼容的方式使用signal。\n局部变更检查当且仅当模板中读取的signal通知 Angular 它已发生更改时，才会安排组件的更改检测。\n在当前的设计中，这种变更检测将针对组件内的每个视图独立发生。\n\n\n\n\n\n\n\n\n\nangular 视图概念views是angular模版中的静态片段 - 已知 UI 元素、指令和子组件的集合。视图组合在一起以创建可以表达 UI 的条件或重复部分的模板。下面的组件模版是一个视图\n&lt;div>\n    &lt;label>Who: &lt;input name=\"who\">&lt;/label>\n    &lt;label>What: &lt;input name=\"what\">&lt;/label>\n&lt;/div>\n而此模板有两个视图 - 带有“Who”和“What”的外部 DOM，以及一个有条件显示的嵌入视图，其中包含“Why”：\n&lt;div>\n    &lt;label>Who: &lt;input name=\"who\">&lt;/label>\n    &lt;label>What: &lt;input name=\"what\">&lt;/label>\n    &lt;ng-container *ngIf=\"showWhy\">\n        &lt;label>Why: &lt;input name=\"why\">&lt;/label>\n    &lt;/ng-container>\n&lt;/div>\nNgIf 或 NgSwitchCase 的每个分支以及 NgFor 的每一行都是 Angular 中独立视图的示例。\n局部变化检测的粒度\n整个应用程序：立即处理整个应用程序（zone.js 的作用，OnPush 优化除外）。\n组件树：遍历各个子树（单个组件及其子组件）\n单个组件：检查组件（包括其所有视图），但不检查其子组件\n视图：单独检查每个视图（angular当前颗粒度）\nDOM 元素：单独更新每个 DOM 元素的所有绑定（文本节点、元素等。SolidJS 在这个级别工作）\n绑定：单独更新每个 DOM 绑定\n\n为什么选择视图级别？\n依赖追踪开销\n 设置依赖图解并不是免费的。signal速度很快，但跟踪越细粒度，图中需要分配和保存的节点就越多。这不仅需要时间，而且消耗内存。\n\n检单独视图已经带来了大部分好处。\n 视图通常是具有可管理数量的绑定的 UI 小片段。评估和更改检测一小组绑定的成本已经非常低（Angular 现在对整个应用程序执行此操作）。\n 使用变更检测处理的最昂贵的组件通常是那些具有大型、重复、高度动态结构的组件，例如具有数百或数千行的数据表。这些组件自然已经分解为许多单独的视图（每一行至少是一个视图，也许更多）。通过基于视图的更改检测和正确结构化的模型，signal已可用于仅驱动表中一行的更新，而无需处理其他未更改的行。\n\n基于视图的signal变更检测与基于zone.js的变更检测完美结合。\n 针对视图运行变更检测的操作已经是构建现有的基于区域的全应用程序变更检测系统的主要语法。对signal使用相同的粒度使互操作性变得更加简单，并允许两个反应性模型共享大部分底层实现代码。这将使我们能够引入signal反应性，而不会极大地影响捆绑包的大小。\n\n\n@Input 是 signals在基于signal的组件中，输入将是signal！这种选择的直接目的是为数据如何流经应用程序建立一个清晰、统一的模型。\n基于signal的输入对数据流有重大影响，因为它们作为computed signal工作，而不是检测到变化的表达式。\n基于zone.js的inputs的工作方式在基于zone.js的应用程序中，输入是在变化检测期间设置的。假设 HomePageCmp 有以下模板：\n&lt;user-profile [userData]=\"authService.loggedInUser.data\" />\n如果loggedInUser 发生变化。 zone.js 会注意到发生了一些事情，但不知道具体发生了什么变化，并将触发整个应用程序的更改检测。更改检测将处理 HomePageCmp 并重新计算与 [userData] 的绑定：表达式 authService.loggedInUser.data。它会将 UserProfileCmp.userData 字段设置为新值，然后深入到 UserProfileCmp 并计算其模板（这可能会使用 userData）。\n基于signal的inputs的工作方式如果 HomePageCmp 和 UserProfileCmp 是基于signal的组件，则 userData 输入的功能将非常不同。当然，绑定必须使用 LoggedInUser signal：\n&lt;user-profile [userData]=\"authService.loggedInUser().data\" />\n\n当首次创建 HomePageCmp 并创建其 UserProfileCmp 子级时，Angular 将为 [userData] 绑定表达式创建一个computed signal：compute(() =&gt; authService.loggedInUser().data)。然后将此派生signal作为 UserProfileCmp 的 userData 输入的值提供。\n\n\n\n\n\n\n\n\n\ninput signal在变化检测之前解析对 userData 输入signal的更新发生在变更检测之前，而不是检测期间。\n\nExpressionChangedAfterItHasBeenChecked 错误不再是风险，因为模型在检查之前已完全同步。 （非确定性模型仍然会导致此类错误，但这是另一个问题）\n数据可以独立于 UI 层次结构流动，而不是被迫仅从父级流向子级。不需要 setTimeout 或 Promise.resolve 或其他技巧。\n\n\n\n\n\n\n\n\n\n\n输入绑定不会触发绑定方中的局部变更检测。\n因为 userData 的绑定是作为computed signal提供的，所以 HomePageCmp 中的任何视图都不依赖于它的值。根据基于signal的变更检测的黄金法则，其任何视图都不会被检测到变更。\n\n\n\n\n\n\n\n\n\n输入绑定不会自动触发接收者中的本地更改检测。\n因为 UserProfileCmp 接收 userData 作为computed signal并不意味着当 userData 更改时将检测到其任何视图的更改。根据黄金法则，只有在 UserProfileCmp 读取其模板中某处的 userData 输入signal时，才会检测到更改。\n换句话说，模板中实际未使用的输入不会触发基于signal的组件中的任何更改检测。\n查询 是 signals与输入类似，视图和子查询是框架“producing”代表组件模型某些方面的反应值的示例。在基于signal的组件中，查询也将作为signal公开。这允许组件自然地对通过计算属性或效果更改的查询做出反应，就像输入一样。\nSignal 和 Zone 混合组件可以在同一应用程序中自由混合signal和non-signal组件。只要遵守signal分量的黄金法则，即使跨越这些边界，变化检测也应该正确运行。\n当signal组件向non-signal组件提供输入绑定时，signal语义用于检测绑定何时发生更改，并设置non-signal组件的输入，在必要时将其标记为检查，并在需要时运行 ngOnChanges。\n当非signal组件绑定到signal组件的输入时，会发生类似的转换。在non-signal组件的更改检测期间，将评估绑定，如果值已更改，则更新传递给子组件的输入signal。\n\n\n\n\n\n\n\nWARNING\nnon-signal 问题有时，指令通过本地引用或 DI 系统为其使用者公开 API。例如，NgModel 将其当前值公开为公共属性，可通过本地引用访问：\n&lt;input ngModel #in=\"ngModel\">\n&lt;p>You typed: &#123;&#123; in.value &#125;&#125;&lt;/p>\n此类 API 在signal组件中可能会出现问题，因为 in.value 不是signal，不能用于触发signal组件的更改检测，即使它随着用户键入而更改。\n在基于zone的组件中，无论如何依赖来自子级的数据都是一个很大的问题。如果当前值的反射移动到  声明上方，则会导致 ExpressionChangedAfterItHasBeenChecked 错误。\n\nZoneless Angular有了signal，就可以在没有 zone.js 的情况下构建 Angular 应用程序。仅signal应用程序将直接安排各个视图的更改检测（可能通过 requestAnimationFrame 或其他一些浏览器语法），而不是依赖区域来进行更改检测。\n在此类应用程序中，尝试使用基于zone的组件将是错误的。\nzone.js\n\n\n\n\n\n\n\n\nAngular 使用 zone.js 来跟踪浏览器中的各种事件（例如 DOM 事件、网络请求和计时器）。 Zone.js 通过对任何可能导致应用程序模型更改的 API 进行猴子修补（在运行时包装和修补回调函数）来跟踪这些事件。然而，当发生此类事件时，Angular 没有任何关于发生了哪些具体更改的信息，或者即使根本没有任何更改。在收到来自 zone.js 的事件通知后，Angular 将读取（拉取）新的模型值，并根据之前看到的模型值的差异来更新 UI。\n","slug":"frontend/angular-v16","date":"2023-07-13T03:00:00.000Z","categories_index":"FRONTEND","tags_index":"angular","author_index":"Kidwen"},{"id":"50eebbead438db6dedc794be2c425ee4","title":"gulp","content":"利用 gulp 和 JavaScript 的灵活性来自动执行缓慢、重复的工作流程，并将其组合成高效的构建管道。\n","slug":"tools/gulp","date":"2023-07-10T10:00:00.000Z","categories_index":"TOOL","tags_index":"build","author_index":"Kidwen"},{"id":"d7acadbeb31d4d41403b5db5aed2bd4c","title":"lodash","content":"一个现代 JavaScript 实用程序库，提供模块化、性能和附加功能。\n","slug":"tools/lodash","date":"2023-07-10T09:00:00.000Z","categories_index":"TOOL","tags_index":"lodash","author_index":"Kidwen"},{"id":"9170303394444f49789e30f6c5748970","title":"rxjs","content":"RxJS（Reactive Extensions for JavaScript）是一个用于处理异步和事件驱动编程的库。它基于观察者模式和迭代器模式，并引入了一些函数式编程的概念。RxJS 提供了一组强大的工具和操作符，可以帮助开发者处理和组合异步数据流。\nRxJS 是一个用于响应式编程的库，它的核心概念是 Observable（可观察对象）。Observable 表示一个可能会产生多个值的异步数据源。通过使用 RxJS，你可以对这些数据流进行处理、转换和组合，从而实现更简洁和可维护的代码。\nRxJS 提供了许多操作符，可以对 Observable 进行各种转换和过滤操作。这些操作符包括映射（map）、过滤（filter）、合并（merge）、延迟（delay）、缓冲（buffer）等等。通过组合这些操作符，你可以构建出复杂的数据流处理逻辑。\n除了操作符，RxJS 还提供了一些工具函数和实用程序，例如调度器（Scheduler）、主题（Subject）和订阅（Subscription）等。调度器用于控制 Observable 在何时发出通知，主题充当事件总线，而订阅则用于管理和取消订阅。\n总结：RxJS 是一个强大的前端库，用于处理异步数据流和事件驱动编程。它提供了丰富的操作符和工具函数，可以帮助开发者处理和组合复杂的数据流。通过使用 RxJS，你可以编写出更具可读性和可维护性的异步代码。\n\n\n\n\n\n\n\n\n\nRxJS 管理异步事件中的要素概念包括以下几点：\n\nObservable:   代表未来值或事件的可调用集合的想法。\nObserver:     是一个回调集合，它知道如何监听 Observable 传递的值。\nSubscription: 表示 Observable 的执行，主要用于取消执行。\nOperators:    是纯函数，支持使用函数式编程风格处理集合，例如map、filter、concat、reduce 等操作。\nSubject:      相当于EventEmitter，也是将值或事件多播到多个观察者的唯一方法。\nSchedulers:   是控制并发的集中调度程序，允许我们在计算发生时进行协调，例如setTimeout 或 requestAnimationFrame 或其他。\n\nObservable\nPull systems 消费者决定什么时候从数据生产者哪里获取数据，而生成者不知道什么时候将数据送给消费者。每一个js方法都是一个Pull system，包括 generator 函数。\n\nPush systems 生产者确定什么时候向消费者发送数据，而消费者不知道什么时候会收到这些数据。Promises 是Pull systems中最通用的类型。\n  import &#123; Observable &#125; from 'rxjs';\n\nconst observable = new Observable((subscriber) => &#123;\n    subscriber.next(1);\n    subscriber.next(2);\n    setTimeout(() => &#123;\n        subscriber.next(3);\n        subscriber.complete();\n    &#125;, 1000);\n&#125;);\n\nconsole.log('订阅开始');\nobservable.subscribe(&#123;\n    next(x) &#123;\n        console.log('got value ' + x);\n    &#125;,\n    error(err) &#123;\n        console.error('something wrong occurred: ' + err);\n    &#125;,\n    complete() &#123;\n        console.log('done');\n    &#125;,\n&#125;);\nconsole.log('订阅结束');\n\n// 订阅开始\n// 1\n// 2\n// 订阅结束\n// got value 3\n// done\n\nObserver\n观察者是 Observable 传递的值的消费者。观察者只是一组回调，每个回调对应 Observable 传递的每种类型的通知：下一步、错误和完成。\n  const observer = &#123;\n    next: x => console.log('Observer got a next value: ' + x),\n    error: err => console.error('Observer got an error: ' + err),\n    complete: () => console.log('Observer got a complete notification'),\n&#125;;\n\n要使用观察者，可以将其提供给 Observable 的订阅：\n  observable.subscribe(observer);\n\n\n\n\n\n\n\n\n\n\n观察者只是具有三个回调的对象，每个回调对应 Observable 可能传递的每种类型的通知。\n\nRxJS 中的观察者也可能是片面的。如果你不提供其中一种回调，Observable 的执行仍然会正常发生，除了某些类型的通知将被忽略，因为它们在观察者中没有相应的回调。\n  // 没有 complete 回掉方法\nconst observer = &#123;\n    next: x => console.log('Observer got a next value: ' + x),\n    error: err => console.error('Observer got an error: ' + err),\n&#125;;\n\n当订阅 Observable 时，也可以只提供下一个回调作为参数，而不附加到 Observer 对象，例如如下所示：\n  // 在 observable.subscribe 内部，它将使用回调参数作为下一个处理程序创建一个 Observer 对象。\nobservable.subscribe(x => console.log('Observer got a next value: ' + x));\n\nSubscriptionSubscription是一个代表一次性资源的对象，通常是 Observable 的执行。Subscription有一个重要的方法，unsubscribe，它不带任何参数，只处理订阅所持有的资源。在以前的 RxJS 版本中，订阅被称为“Disposable”。\nimport &#123; interval &#125; from 'rxjs';\n\nconst observable = interval(1000);\nconst subscription = observable.subscribe(x => console.log(x));\n\nsubscription.unsubscribe();\n\n\n\n\n\n\n\n\n\n\n订阅本质上只有一个 unsubscribe() 函数来释放资源或取消 Observable 执行。\n订阅也可以放在一起，以便调用一个订阅的 unsubscribe() 可以取消订阅多个订阅。您可以通过将一个订阅“添加”到另一个订阅中来完成此操作：\nimport &#123; interval &#125; from 'rxjs';\n\nconst observable1 = interval(400);\nconst observable2 = interval(300);\n\nconst subscription = observable1.subscribe(x => console.log('first: ' + x));\nconst childSubscription = observable2.subscribe(x => console.log('second: ' + x));\n\nsubscription.add(childSubscription);\n\nsetTimeout(() => &#123;\n  // 同时取消订阅 subscription 和 childSubscription\n  subscription.unsubscribe();\n&#125;, 1000);\n\n// second: 0\n// first: 0\n// second: 1\n// first: 1\n// second: 2\n\n订阅还有一个remove(otherSubscription)方法，以便撤消添加的子订阅。\nSubjectSchedulersOperators","slug":"tools/rxjs","date":"2023-07-10T02:30:00.000Z","categories_index":"TOOL","tags_index":"rxjs","author_index":"Kidwen"},{"id":"26df78b12ea8461da2d0f20e21f4a6a9","title":"响应式主题","content":"将页面自适应匹配用户的喜好，例如黑色模式\n可以调整网站的展示以匹配用户的喜好。首先，需要知道如何借力浏览器来增加网站曝光从而提高品牌知名度。\n自定义浏览器界面一些浏览器可以允许基于网站的调色板设置一个主题颜色。然后浏览器界面会自适应设置后的颜色。在页面head中名为theme-color的meta元素中添加颜色。\n&lt;meta name=\"theme-color\" content=\"#00D494\">\n\n\n\n\n\n\n\n\n\n\n像这样将样式信息放在HTML中而不是CSS中可能会显得有点怪异，但是这允许浏览器一旦加载好页面尽快更新它的界面而不是等待CSS加载好。\n使用JavaScript更新theme-color的值。请谨慎操作。如果浏览器的颜色模式变化太频繁会使用户难以接受。请考虑微调主题颜色的细微方式。如果变化过于明显，用户可能会因为感到烦恼而离开。\n也可以在网页manifest中指定一个主题色。这个JSON文件中包含了关于网站的元数据。\n将清单文件的链接放在文档的head。使用rel值为manifest的link元素\n&lt;link rel=\"manifest\" href=\"/manifest.json\">\n\n在manifest文件中，使用键值对（key&#x2F;value）的方式列出所有元数据\n&#123;\n    \"short_name\": \"Clearleft\",\n    \"name\": \"Clearleft design agency\",\n    \"start_url\": \"/\",\n    \"background_color\": \"#00D494\",\n    \"theme_color\": \"#00D494\",\n    \"display\": \"standalone\"\n&#125;\n\n如果访问者决定将您的网站添加到他们的主屏幕上，浏览器将使用您清单文件中的信息来显示适当的快捷方式。\n\n\n\n\n\n\n\n\n\n了解如何添加 Web 应用manifest的更多信息\n\nWeb App Manifest - MDN Web Docs: Mozilla Developer Network (MDN) 提供的关于 Web App Manifest 的详细文档，包含各个属性和用法的解释。\n\nWeb App Manifest Specification - W3C: Web App Manifest 的官方规范文档，由 W3C（World Wide Web Consortium）提供，包含清单文件的详细规范。\n\nIntroduction to Web App Manifests - Google Developers: Google Developers 提供的关于 Web App Manifest 的简介和入门指南，包含示例和最佳实践。\n\n\n通过查阅以上资源，您将能够更深入地了解如何添加和配置 Web 应用清单（Web App Manifest）以及相关属性的使用方法。\n提供一个黑色模式许多操作系统允许用户指定一个黑色或者亮色主题，这是根据用户的主题偏好优化您的网站的好主意。可以通过在媒体特性中的prefers-color-scheme访问此首选项。\n@media (prefers-color-scheme: dark) &#123;\n    // 定义黑色主题样式\n&#125;\n\n\n\n在meta元素中使用prefers-color-scheme媒体特性指定主题颜色。\n&lt;meta name=\"theme-color\" content=\"#ffffff\" media=\"(prefers-color-scheme: light)\">\n&lt;meta name=\"theme-color\" content=\"#000000\" media=\"(prefers-color-scheme: dark)\">\n\n可以在svg中使用prefers-color-scheme媒体特性。如果使用一个SVG文件作为的图标，它也会被黑色模式调节。参考\n使用自定义属性主题化如果在多个地方的CSS中使用了相同的颜色值，在prefers-color-scheme媒体查询中重复所有选择器可能会非常乏味。\nbody &#123;\n  background-color: white;\n  color: black;\n&#125;\ninput &#123;\n  background-color: white;\n  color: black;\n  border-color: black;\n&#125;\nbutton &#123;\n  background-color: black;\n  color: white;\n&#125;\n@media (prefers-color-scheme: dark) &#123;\n  body &#123;\n    background-color: black;\n    color: white;\n  &#125;\n  input &#123;\n    background-color: black;\n    color: white;\n    border-color: white;\n  &#125;\n  button &#123;\n    background-color: white;\n    color: black;\n  &#125;\n&#125;\n\n使用CSS自定义属性来存储颜色值。自定义属性类似于程序中的变量。可以更新这些变量值而不更新其名称。\n如果在prefers-color-scheme媒体查询中更新自定义属性值，这样就没必要重复写各种选择器。\nhtml &#123;\n  --page-color: white;\n  --ink-color: black;\n&#125;\n@media (prefers-color-scheme: dark) &#123;\n  html &#123;\n    --page-color: black;\n    --ink-color: white;\n  &#125;\n&#125;\nbody &#123;\n  background-color: var(--page-color);\n  color: var(--ink-color);\n&#125;\ninput &#123;\n  background-color: var(--page-color);\n  color: var(--ink-color);\n  border-color: var(--ink-color);\n&#125;\nbutton &#123;\n  background-color: var(--ink-color);\n  color: var(--page-color);\n&#125;\n\n\n\n\n有关使用自定义属性进行主题化的更高级示例，请参阅构建配色方案。\n图片如果在HTML中使用SVG， 也可以应用自定义属性。\nsvg &#123;\n  stroke: var(--ink-color);\n  fill: var(--page-color);\n&#125;\n\n现在 icon 会跟着页面上的其他元素一起改变颜色。\n如果想在黑色模式下调节图片的亮度，可以在css中使用filter方法。\n\n\n\n\n\n对于一些图片，可能想完全替换他们在黑色模式下。例如，可能想在黑色模式下展示一个地图。使用&lt;picture&gt;元素包含一个使用prefers-color-scheme媒体查询的&lt;source&gt;元素。\n&lt;picture>\n  &lt;source srcset=\"darkimage.png\" media=\"(prefers-color-scheme: dark)\">\n  &lt;img src=\"lightimage.png\" alt=\"A description of the image.\">\n&lt;/picture>\n\n\n\n表单浏览器为表单字段提供默认调色板。让浏览器知道您的网站同时提供深色和浅色模式。这样，浏览器就可以为表单提供适当的默认样式。\n添加下面代码到CSS中：\nhtml &#123;\n  color-scheme: light;\n&#125;\n@media (prefers-color-scheme: dark) &#123;\n  html &#123;\n    color-scheme: dark;\n  &#125;\n&#125;\n\n也可以使用HTML。添加下面代码到的文档中：\n&lt;meta name=\"supported-color-schemes\" content=\"light dark\">\n\n\n\n使用accent-color属性设置checkboxs， radio 按钮和其他的表单元素的样式。\nhtml &#123;\n  accent-color: red;\n&#125;\n\n深色主题通常具有柔和的品牌颜色。更新深色模式的accent-color。\nhtml &#123;\n  accent-color: red;\n&#125;\n@media (prefers-color-scheme: dark) &#123;\n  html &#123;\n    accent-color: pink;\n  &#125;\n&#125;\n\n为此使用自定义属性是有意义的，这样您就可以将所有颜色声明保存在一个位置。\nhtml &#123;\n  color-scheme: light;\n  --page-color: white;\n  --ink-color: black;\n  --highlight-color: red;\n&#125;\n@media (prefers-color-scheme: dark) &#123;\n  html &#123;\n    color-scheme: dark;\n    --page-color: black;\n    --ink-color: white;\n    --highlight-color: pink;\n  &#125;\n&#125;\nhtml &#123;\n  accent-color: var(--highlight-color);\n&#125;\nbody &#123;\n  background-color: var(--page-color);\n  color: var(--ink-color);\n&#125;\n\n\n\n\n\n\n\n\n\n\n有关使用主题颜色对元素进行着色的更多信息，请参阅有关更多着色的部分。\n","slug":"frontend/theming","date":"2023-06-15T05:30:00.000Z","categories_index":"FRONTEND","tags_index":"theming","author_index":"Kidwen"},{"id":"901d1e2a3d4f7a227f941449b393ca9a","title":"animate angular","content":"Angular Animations is a built-in animation library in Angular framework that allows you to create rich and interactive animations in your application. It provides a powerful set of tools and APIs that make it easy to implement dynamic and smooth animation effects in Angular.\n\n\n\n\n\n\n\n\n\nHere are some features and capabilities of Angular Animations:\n\nDeclarative Syntax: Angular Animations uses a declarative syntax to describe animation effects. You can use specific directives and attributes in your templates, and define animation triggers and state transitions in your component classes to control the behavior of animations.\n\nDiverse Animation Support: Angular Animations supports various types of animation effects including fading, translation, rotation, scaling, color changes, and more. You can create complex animation sequences by combining and chaining multiple animations to achieve richer effects.\n\nTriggers and States: By defining triggers and states, you can control when and how animations are triggered based on specific conditions. Triggers can be mouse events, route navigation, component lifecycle hooks, and more, while states define the transitions between different animation states.\n\nEasing Functions: Angular Animations supports a variety of easing functions to define the speed curve of animations, making them smoother and more natural. You can use built-in easing functions or define custom ones.\n\nAnimation Groups and Parallel Effects: You can combine multiple animations into an animation group, allowing them to play simultaneously or sequentially. This enables you to create more complex animation effects, such as scaling and rotating an element at the same time.\n\nDynamic and Conditional Animations: Angular Animations allows you to enable or disable animations based on dynamic data or conditions. You can use Angular’s data binding and conditional statements to implement dynamic animations based on states or user interactions.\n\nHigh Performance and Optimization: Angular Animations is designed to be a high-performance animation library. It leverages Angular’s change detection mechanism and frame synchronization strategy, as well as utilizes the Web Animations API when available, to achieve hardware-accelerated animation effects.\n\nIn summary, Angular Animations is a powerful animation library provided by the Angular framework. With its declarative syntax and rich set of features, you can easily create interactive and smooth animation effects in your application. Whether it’s a simple element fade-in or a complex animation sequence, Angular Animations provides flexible tools and APIs to implement a wide range of animation effects.\n\n\n\nPreparation\n\n\n\n\n\n\n\n\nAdd relation module in NgModule\nimport &#123; NgModule &#125; from '@angular/core';\nimport &#123; BrowserModule &#125; from '@angular/platform-browser';\nimport &#123; BrowserAnimationsModule &#125; from '@angular/platform-browser/animations';\n\n@NgModule(&#123;\n    imports: [\n        BrowserModule,\n        BrowserAnimationsModule,\n    ],\n    declarations: [ ],\n    bootstrap: [ ],\n&#125;)\nexport class AppModule &#123; &#125;\n\n\n\n\n\n\n\n\n\n\nUse the method or property from @angular/animations\nimport &#123;\n    trigger,\n    state,\n    style,\n    animate,\n    transition,\n    // ...\n&#125; from '@angular/animations';\n\nIntroductionstate()\n\n\n\n\n\n\n\n\ndefine the custom state of animation, then you can conver one state to another state to use some animations, the defualt state such as void(the dom not render) and *(the dom rendered)\nstate('disable', style(&#123;\n    backgroundColor: 'rgba(0, 0, 0, .12)',\n    color: 'rgba(0, 0, 0, .38)'\n&#125;))\n\nstyle()\n\n\n\n\n\n\n\n\ndefine the style of state, must be cameCase for style attributes that contain dashes, such as backgroundColor or wrap them in quotes, such as ‘background-color’\nanimate()\n\n\n\n\n\n\n\n\nUse the animate() function to define the length, delay, and easing of a transition, and to designate the style function for defining styles while transitions are taking place. Use the animate() function to define the keyframes() function for multi-step animations. These definitions are placed in the second argument of the animate() function.\nanimate ('duration delay easing')\n\nduration such as 100, &#39;100ms&#39;, &#39;0.1s&#39;\ndelay wait for the value time then run the animation\neasing suche as ease-in, ease-out, ease-in-out\n\ntransition()\n\n\n\n\n\n\n\n\nThe transition() function accepts two arguments: The first argument accepts an expression that defines the direction between two transition states, and the second argument accepts one or a series of animate() steps\ntransition('open => closed', [\n  animate('1s')\n]),\n\ntrigger()\n\n\n\n\n\n\n\n\nKicks off the animation and serves as a container for all other animation function calls. HTML template binds to triggerName. Use the first argument to declare a unique trigger name. Uses array syntax.\n@Component(&#123;\n    selector: 'app-open-close',\n    animations: [\n        trigger('openClose', [\n            state('open', style(&#123;\n                height: '200px',\n                opacity: 1,\n                backgroundColor: 'yellow'\n            &#125;)),\n            state('closed', style(&#123;\n                height: '100px',\n                opacity: 0.8,\n                backgroundColor: 'blue'\n            &#125;)),\n            transition('open => closed', [\n                animate('1s')\n            ]),\n            transition('closed => open', [\n                animate('0.5s')\n            ]),\n        ])\n    ]\n\nExample","slug":"frontend/angular-animate","date":"2023-06-15T02:00:00.000Z","categories_index":"FRONTEND","tags_index":"angular,animate","author_index":"Kidwen"},{"id":"a19d5e0d55b52c82da47e7788eb0a54f","title":"git proxy","content":"Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.\nShow configgit config -l\n\nSet proxygit config --global http.proxy 127.0.0.1:10809\ngit config --global https.proxy 127.0.0.1:10809\n\nCancle proxygit config --global --unset http.proxy\ngit config --global --unset https.proxy\n","slug":"proxy/git","date":"2023-04-06T09:06:00.000Z","categories_index":"PROXY","tags_index":"git","author_index":"Kidwen"},{"id":"e10b3e307ab7cce969dd23a6ff7cab07","title":"python pip proxy","content":"Python is a high-level, general-purpose programming language. Its design philosophy emphasizes code readability with the use of significant indentation via the off-side rule.\npip 单次设置代理pip install xxx --proxy=http://localhost:10809\n\npip 设置镜像源# C:\\Users\\[userName]\\pip\\pip.ini\n[global]\nindex-url = https://pypi.tuna.tsinghua.edu.cn/simple\ntrusted-host = pypi.tuna.tsinghua.edu.cn\n\n[search]\nindex = https://pypi.tuna.tsinghua.edu.cn/simple\n","slug":"proxy/python","date":"2023-04-05T10:00:00.000Z","categories_index":"PROXY","tags_index":"python","author_index":"Kidwen"},{"id":"f47c8ac6f30df916a8383883258747a7","title":"eslint angular","content":"Angular 是一个应用设计框架与开发平台，旨在创建高效而精致的单页面应用。ESLint 是一个很棒的 JavaScript 代码检查工具。TypeScript 是一种基于 JavaScript 的强类型编程语言。\n在angular项目中添加eslint\n\n\n\n\n\n\n\n\n此命令会默认安装angular-eslint相关依赖,包括@angular-eslint/builder,@angular-eslint/eslint-plugin,@angular-eslint/eslint-plugin-template,@angular-eslint/schematics,@angular-eslint/template-parser,@typescript-eslint/eslint-plugin,@typescript-eslint/parser,并在angular.json文件中自动添加如下配置（如果没有则手动添加）。\n&#123;\n    // ...\n    \"cli\": &#123;\n        // ...\n        \"schematicCollections\": [\"@angular-eslint/schematics\"]\n    &#125;\n&#125;\n\nng add @angular-eslint/schematics\n\n安装eslint插件npm install eslint-plugin-import eslint-plugin-jsdoc eslint-plugin-prefer-arrow eslint-plugin-unicorn --save-dev\n\n配置eslint插件\n\n\n\n\n\n\n\n\n插件用于加载第三方规则集合，在 plugins 属性中，可以定义一个数组，数组中的每个元素都是一个字符串，代表要使用的插件的名称。一旦配置中定义了插件，可以在 rules 属性中使用插件的规则。插件的规则名称由插件名称和规则名称组成，中间使用 &#x2F; 分隔。\n// .eslintrc.js\nmodule.exports = &#123;\n    // ...\n    \"plugins\": [\n        \"import\",\n        \"jsdoc\",\n        \"unicorn\",\n        \"prefer-arrow\",\n    ],\n    // ...\n&#125;\n\n配置lint规则// .eslintrc.js\nmodule.exports = &#123;\n    // ...\n    \"rules\":  &#123;\n        \"import/no-default-export\": \"error\",\n        // ...\n    &#125;,\n    // ...\n&#125;\n\n基于不同文件类型覆盖规则// .eslintrc.js\nmodule.exports = &#123;\n    // ...\n    \"overrides\": [\n        &#123;\n            \"files\": [\n                \"*.component.ts\"\n            ],\n            \"plugins\": [\n                \"@angular-eslint/eslint-plugin-template\",\n                \"@angular-eslint\",\n            ],\n            \"rules\": &#123;\n                \"@angular-eslint/no-empty-lifecycle-method\": \"error\",\n                // ...\n            &#125;\n        &#125;,\n    ]\n&#125;\n\n规则介绍@typescript-eslintarray-type\n官方地址\n\n描述\n\n配置数组声明方式,error代表使用T[]\n\n\n类型\n\n‘error’|Array\n\n\n选项\n  &#123;\n    default?: &quot;array&quot; | &quot;generic&quot; | &quot;array-simple&quot;;\n    readonly?: &quot;array&quot; | &quot;generic&quot; | &quot;array-simple&quot;;\n&#125;\n\n示例\n  &#123;\n    \"@typescript-eslint/array-type\": [\n        \"error\",\n        &#123;\n            \"default\": \"generic\"\n        &#125;\n    ],\n&#125;\n\nban-ts-comment\n官方地址\n\n描述\n\n禁止@ts-&lt;directive&gt;注释或要求指令后的描述\n默认只允许@ts-check\nallow-with-description允许带描述的注释指令\n\n  // @ts-expect-error: description\n\n\ndescriptionFormat正则匹配指令注释后的描述,不匹配则报错\nminimumDescriptionLength指令注释后的描述最短长度\n\n\n选项\n  type DirectiveConfigSchema =\n    | boolean\n    | \"allow-with-description\"\n    | &#123;\n        descriptionFormat?: string;\n        &#125;;\n\ninterface Options &#123;\n    \"ts-expect-error\"?: DirectiveConfigSchema;\n    \"ts-ignore\"?: DirectiveConfigSchema;\n    \"ts-nocheck\"?: DirectiveConfigSchema;\n    \"ts-check\"?: DirectiveConfigSchema;\n    minimumDescriptionLength?: number;\n&#125;\n\nconst defaultOptions: Options = [\n    &#123;\n        \"ts-expect-error\": \"allow-with-description\",\n        \"ts-ignore\": true,\n        \"ts-nocheck\": true,\n        \"ts-check\": false,\n        minimumDescriptionLength: 3,\n    &#125;,\n];\n\n示例\n  &#123;\n    \"@typescript-eslint/ban-ts-comment\": [\n        \"error\",\n        &#123;\n            \"ts-expect-error\": \"allow-with-description\",\n            \"ts-ignore\": true,\n            \"ts-nocheck\": true,\n            \"ts-check\": false,\n            \"minimumDescriptionLength\": 3\n        &#125;\n    ],\n&#125;\n\nban-types\n官方地址\n\n描述\n\n使用小写类型以保持一致性\n\n使用正确的函数类型\n\n使用安全的object类型\n\n\n\n❌\n✅\n\n\n\nString\nstring\n\n\nBoolean\nboolean\n\n\nNumber\nnumber\n\n\nSymbol\nsymbol\n\n\nBigInt\nbigint\n\n\nFunction\n() &#x3D;&gt; {}\n\n\nObject\nobject | 特定类型\n\n\n{}\n特定类型\n\n\n\n\n\n选项\n  interface Options &#123;\ntypes?: &#123;\n    [k: string]:\n    | null\n    | boolean\n    | string\n    | &#123;\n        message?: string;\n        fixWith?: string;\n        suggest?: string[];\n        &#125;;\n&#125;;\nextendDefaults?: boolean;\n&#125;\n\nconst defaultOptions: Options = [&#123;&#125;];\n\n示例\n  &#123;\n    \"@typescript-eslint/ban-types\": \"error\"\n&#125;\n// 或者\n&#123;\n    \"@typescript-eslint/ban-types\": [\n        \"error\",\n        &#123;\n        \"types\": &#123;\n            // 自定义消息描述为什么不能使用此类型\n            \"Foo\": \"Don't use Foo because it is unsafe\",\n\n            // 添加一个自定义消息，并告知插件如何修复这个问题\n            \"OldAPI\": &#123;\n            \"message\": \"Use NewAPI instead\",\n            \"fixWith\": \"NewAPI\"\n            &#125;,\n\n            // 取消默认禁用的类型\n            \"&#123;&#125;\": false\n        &#125;,\n        \"extendDefaults\": true\n        &#125;\n    ]\n&#125;\n\nconsistent-type-definitions\n官方地址\n\n描述\n\n强制使用interface或者type来声明类型\n\n\n选项\n  type Options = \"interface\" | \"type\";\n\nconst defaultOptions: Options = [\"interface\"];\n\n示例\n  &#123;\n   \"@typescript-eslint/consistent-type-definitions\": [\"error\", \"interface\"],\n   // 或者\n   \"@typescript-eslint/consistent-type-definitions\": [\"error\", \"type\"]\n&#125;\n\ndot-notation\n官方地址\n\n描述\n\n尽可能强制执行点表示法\n\n\n\n❌\n✅\n\n\n\nobj[“property”]\nobj.property\n\n\n\n\n\n选项\n  interface Options extends BaseDotNotationOptions &#123;\n    allowPrivateClassPropertyAccess?: boolean;\n    allowProtectedClassPropertyAccess?: boolean;\n    allowIndexSignaturePropertyAccess?: boolean;\n&#125;\n\nconst defaultOptions: Options = &#123;\n    ...baseDotNotationDefaultOptions,\n    allowPrivateClassPropertyAccess: false,\n    allowProtectedClassPropertyAccess: false,\n    allowIndexSignaturePropertyAccess: false,\n&#125;;\n\n示例\n  &#123;\n    // 必须禁用基础规则\n    \"dot-notation\": \"off\",\n    \"@typescript-eslint/dot-notation\": \"error\"\n&#125;\n\nexplicit-member-accessibility\n官方地址\n\n描述\n\n需要对类属性和方法进行显式可访问性修饰符。public, protected, private\n\n\n选项\n  type AccessibilityLevel = \"explicit\" | \"no-public\" | \"off\";\n\ninterface Options &#123;\n    accessibility?: AccessibilityLevel;\n    overrides?: &#123;\n        accessors?: AccessibilityLevel;\n        constructors?: AccessibilityLevel;\n        methods?: AccessibilityLevel;\n        properties?: AccessibilityLevel;\n        parameterProperties?: AccessibilityLevel;\n    &#125;;\n    ignoredMethodNames?: string[];\n&#125;\n\nconst defaultOptions: Options = [&#123; accessibility: \"explicit\" &#125;];\n\n示例\n  &#123;\n    \"@typescript-eslint/explicit-member-accessibility\": \"error\"\n&#125;\n\nno-empty-function\n官方地址\n\n描述\n\n不允许空方法\n\n\n选项\n  \ntype AllowOptionEntries =\n    | 'functions'\n    | 'arrowFunctions'\n    | 'generatorFunctions'\n    | 'methods'\n    | 'generatorMethods'\n    | 'getters'\n    | 'setters'\n    | 'constructors'\n    | 'private-constructors'\n    | 'protected-constructors'\n    | 'asyncFunctions'\n    | 'asyncMethods'\n    | 'decoratedFunctions'\n    | 'overrideMethods';\n\ninterface Options extends BaseNoEmptyFunctionOptions &#123;\n    allow?: Array&lt;AllowOptionEntries>;\n&#125;\nconst defaultOptions: Options = &#123;\n    ...baseNoEmptyFunctionDefaultOptions,\n    allow: [],\n&#125;;\n\n示例\n  &#123;\n    // 必须禁用基础规则\n    \"no-empty-function\": \"off\",\n    \"@typescript-eslint/no-empty-function\": [\n        \"error\",\n        &#123;\n            \"allow\": [\"decoratedFunctions\"]\n        &#125;\n    ]\n&#125;\n\nno-for-in-array\n官方地址\n\n描述\n\n禁止使用 for-in 循环迭代数组。\n\n\n选项\n\nnone\n\n\n示例\n  &#123;\n    \"@typescript-eslint/no-for-in-array\": \"error\"\n&#125;\n\nno-inferrable-types\n官方地址\n\n描述\n\n不允许对初始化为数字、字符串或布尔值的变量或参数进行显式类型声明。\n\n\n\n❌\n✅\n\n\n\nconst a: bigint &#x3D; 10n;\nconst a &#x3D; 10n;\n\n\nconst a: bigint &#x3D; BigInt(10);\nconst a &#x3D; BigInt(10);\n\n\nconst a: boolean &#x3D; !0;\nconst a &#x3D; !0;\n\n\nconst a: boolean &#x3D; Boolean(null);\nconst a &#x3D; Boolean(null);\n\n\nconst a: boolean &#x3D; true;\nconst a &#x3D; true;\n\n\nconst a: null &#x3D; null;\nconst a &#x3D; null;\n\n\nconst a: number &#x3D; 10;\nconst a &#x3D; 10;\n\n\nconst a: number &#x3D; Infinity;\nconst a &#x3D; Infinity;\n\n\nconst a: number &#x3D; NaN;\nconst a &#x3D; NaN;\n\n\nconst a: number &#x3D; Number(‘1’);\nconst a &#x3D; Number(‘1’);\n\n\nconst a: RegExp &#x3D; &#x2F;a&#x2F;;\nconst a &#x3D; &#x2F;a&#x2F;;\n\n\nconst a: RegExp &#x3D; new RegExp(‘a’);\nconst a &#x3D; new RegExp(‘a’);\n\n\nconst a: string &#x3D; str;\nconst a &#x3D; str;\n\n\nconst a: string &#x3D; String(1);\nconst a &#x3D; String(1);\n\n\nconst a: symbol &#x3D; Symbol(‘a’);\nconst a &#x3D; Symbol(‘a’);\n\n\nconst a: undefined &#x3D; undefined;\nconst a &#x3D; undefined;\n\n\nconst a: undefined &#x3D; void someValue;\nconst a &#x3D; void someValue;\n\n\n\n\n\n选项\n  interface Options &#123;\n    ignoreParameters?: boolean;\n    ignoreProperties?: boolean;\n&#125;\n\nconst defaultOptions: Options = [\n    &#123; ignoreParameters: false, ignoreProperties: false &#125;,\n];\n\n示例\n  &#123;\n    \"@typescript-eslint/no-inferrable-types\": \"error\"\n&#125;\n\nno-non-null-assertion\n官方地址\n\n描述\n\n禁止使用 ! 进行非空断言后缀运算符。\n\n\n选项\n\nnone\n\n\n示例\n  &#123;\n    \"@typescript-eslint/no-non-null-assertion\": \"error\"\n&#125;\n\nno-require-imports\n官方地址\n\n描述\n\n禁止调用 require()\n\n\n选项\n\nnone\n\n\n示例\n  &#123;\n    \"@typescript-eslint/no-require-imports\": \"error\"\n&#125;\n\nno-this-alias\n官方地址\n\n描述\n\n禁止使用 this 别名\n\n\n选项\n  interface Options &#123;\n    /**\n    * 是否忽略解构, 例如 `const &#123; props, state &#125; = this`.\n    */\n    allowDestructuring?: boolean;\n    /**\n    * 忽略的名称, 例如 [\"self\"] for `const self = this;`.\n    */\n    allowedNames?: string[];\n&#125;\n\nconst defaultOptions: Options = [\n    &#123; allowDestructuring: true, allowedNames: [] &#125;,\n];\n\n示例\n  &#123;\n    \"@typescript-eslint/no-this-alias\": \"error\"\n&#125;\n\nno-unnecessary-type-assertion\n官方地址\n\n描述\n\n禁止不更改表达式类型的类型断言。\n\n\n选项\n  interface Options &#123;\n    /**\n     * 忽略的类型名称列表。\n    */\n    typesToIgnore?: string[];\n&#125;\n\nconst defaultOptions: Options = [&#123;&#125;];\n\n示例\n  &#123;\n    \"@typescript-eslint/no-unnecessary-type-assertion\": [\"error\", &#123; \"typesToIgnore\": [\"Foo\"] &#125;]\n&#125;\n\nno-var-requires\n官方地址\n\n描述\n\n不允许 require 语句（导入语句中除外）\n\n\n\n❌\n✅\n\n\n\nvar foo &#x3D; require(‘foo’);\nimport foo &#x3D; require(‘foo’);\n\n\nconst foo &#x3D; require(‘foo’);\nrequire(‘foo’);\n\n\nlet foo &#x3D; require(‘foo’);\nimport foo from ‘foo’;\n\n\n\n\n\n选项\n\nnone\n\n\n示例\n  &#123;\n    \"@typescript-eslint/no-var-requires\": \"error\"\n&#125;\n\nprefer-for-of\n官方地址\n\n描述\n\n尽可能强制使用 for-of 循​​环而不是标准 for 循环。\n\n\n选项\n\nnone\n\n\n示例\n  &#123;\n    \"@typescript-eslint/prefer-for-of\": \"error\"\n&#125;\n\nprefer-readonly\n官方地址\n\n描述\n\n如果私有成员从未在构造函数外部修改过，则要求将其标记为只读\n\n\n选项\n  interface Options &#123;\n    // 用于限制仅检查立即分配 `lambda` 值的成员。\n    onlyInlineLambdas?: boolean;\n&#125;\n\nconst defaultOptions: Options = [&#123; onlyInlineLambdas: false &#125;];\n\n示例\n  &#123;\n    \"@typescript-eslint/prefer-readonly\": [\"error\", &#123; \"onlyInlineLambdas\": true &#125;]\n&#125;\n\nstrict-boolean-expressions\n官方地址\n\n描述\n\n禁止布尔表达式中的某些类型。\n\n\n选项\n  interface Options &#123;\n    allowString?: boolean;\n    allowNumber?: boolean;\n    allowNullableObject?: boolean;\n    allowNullableBoolean?: boolean;\n    allowNullableString?: boolean;\n    allowNullableNumber?: boolean;\n    allowNullableEnum?: boolean;\n    allowAny?: boolean;\n    allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing?: boolean;\n&#125;\n\nconst defaultOptions: Options = [\n    &#123;\n        allowString: true,\n        allowNumber: true,\n        allowNullableObject: true,\n        allowNullableBoolean: false,\n        allowNullableString: false,\n        allowNullableNumber: false,\n        allowNullableEnum: true,\n        allowAny: false,\n        allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing: false,\n    &#125;,\n];\n\n示例\n  &#123;\n    \"@typescript-eslint/strict-boolean-expressions\": \"error\"\n&#125;\n\nawait-thenable\n官方地址\n\n描述\n\n禁止 await 不是 Thenable 的值。\n\n\n选项\n\nnone\n\n\n示例\n  &#123;\n    \"@typescript-eslint/await-thenable\": \"error\"\n&#125;\n\nno-unnecessary-boolean-literal-compare\n官方地址\n\n描述\n\n禁止与布尔文字进行不必要的相等比较。\n\n\n选项\n  interface Options &#123;\n    /**\n    * 是否允许可空布尔变量和“true”之间的比较。\n    */\n    allowComparingNullableBooleansToTrue?: boolean;\n    /**\n    * 是否允许可为 null 的布尔变量和“false”之间进行比较。\n    */\n    allowComparingNullableBooleansToFalse?: boolean;\n&#125;\n\nconst defaultOptions: Options = [\n    &#123;\n        allowComparingNullableBooleansToTrue: true,\n        allowComparingNullableBooleansToFalse: true,\n    &#125;,\n];\n示例\n  &#123;\n    \"@typescript-eslint/no-unnecessary-boolean-literal-compare\": \"error\"\n&#125;\n\nno-unnecessary-qualifier\n官方地址\n\n描述\n\n禁止不必要的命名空间限定符。\n\n\n选项\n\nnone\n\n\n示例\n  &#123;\n    \"@typescript-eslint/no-unnecessary-qualifier\": \"error\"\n&#125;\n\nno-unnecessary-type-arguments\n官方地址\n\n描述\n\n不允许类型参数等于默认值。\n\n\n选项\n\nnone\n\n\n示例\n  &#123;\n    \"@typescript-eslint/no-unnecessary-type-arguments\": \"error\"\n&#125;\n\npromise-function-async\n官方地址\n\n描述\n\n要求任何返回 Promise 的函数或方法被标记为异步。\n\n\n选项\n  interface Options &#123;\n    /**\n    * 是否将“any”和“unknown”视为 Promise。\n    */\n    allowAny?: boolean;\n    /**\n    * 任何额外的类或接口名称都被视为 Promise。\n    */\n    allowedPromiseNames?: string[];\n    checkArrowFunctions?: boolean;\n    checkFunctionDeclarations?: boolean;\n    checkFunctionExpressions?: boolean;\n    checkMethodDeclarations?: boolean;\n&#125;\n\nconst defaultOptions: Options = [\n    &#123;\n        allowAny: true,\n        allowedPromiseNames: [],\n        checkArrowFunctions: true,\n        checkFunctionDeclarations: true,\n        checkFunctionExpressions: true,\n        checkMethodDeclarations: true,\n    &#125;,\n];\n\n示例\n  &#123;\n    \"@typescript-eslint/promise-function-async\": \"error\"\n&#125;\n\nrestrict-plus-operands\n官方地址\n\n描述\n\n要求加法的两个操作数类型相同，并且为 bigint number 或 string。\n\n\n选项\n  interface Options &#123;\n    /**\n    * 是否允许`any`类型值。\n\n    */\n    allowAny?: boolean;\n    /**\n    * 是否允许`boolean`类型值。\n    */\n    allowBoolean?: boolean;\n    /**\n    * 是否允许 `null` 或者 `undefined` 类型值.\n    */\n    allowNullish?: boolean;\n    /**\n    * 是否允许 `bigint`/`number` 类型值和 `string` 类型值相加。\n    */\n    allowNumberAndString?: boolean;\n    /**\n    * 是否允许 `regexp` 类型值。\n    */\n    allowRegExp?: boolean;\n    /**\n    * 是否检查复合赋值，例如`+=`。\n    */\n    checkCompoundAssignments?: boolean;\n&#125;\n\nconst defaultOptions: Options = [&#123; checkCompoundAssignments: false &#125;];\n\n示例\n  &#123;\n    \"@typescript-eslint/restrict-plus-operands\": \"error\"\n&#125;\n\nunbound-method\n官方地址\n\n描述\n\n强制以预期范围调用未绑定方法。\n\n\n选项\n  interface Options &#123;\n    /**\n    * 是否跳过检查“静态”方法是否正确绑定。\n    */\n    ignoreStatic?: boolean;\n&#125;\n\nconst defaultOptions: Options = [&#123; ignoreStatic: false &#125;];\n\n示例\n  &#123;\n    \"@typescript-eslint/unbound-method\": \"error\"\n&#125;\n\nno-unused-vars\n官方地址\n\n描述\n\n禁止使用未使用的变量。\n\n\n选项\n\nnone\n\n\n示例\n  &#123;\n    // 必须禁用基础规则\n    \"no-unused-vars\": \"off\",\n    \"@typescript-eslint/no-unused-vars\": \"error\"\n&#125;\n\nno-explicit-any\n官方地址\n\n描述\n\n禁用 any 类型\n\n\n选项\n  interface Options &#123;\n    /**\n    * 是否启用自动修复，将`any`类型转换为`unknown`类型。\n    */\n    fixToUnknown?: boolean;\n    /**\n    * 是否忽略其余参数数组。\n    */\n    ignoreRestArgs?: boolean;\n&#125;\n\nconst defaultOptions: Options = [\n    &#123; fixToUnknown: false, ignoreRestArgs: false &#125;,\n];\n\n示例\n  &#123;\n    \"@typescript-eslint/no-explicit-any\": \"error\"\n&#125;\n\nno-unsafe-argument\n官方地址\n\n描述\n\n禁止使用any类型的值调用函数。\n\n\n选项\n\nnone\n\n\n示例\n  &#123;\n    \"@typescript-eslint/no-unsafe-argument\": \"error\"\n&#125;\n\nno-unsafe-assignment\n官方地址\n\n描述\n\n禁止将任何类型的值分配给变量和属性。\n\n\n选项\n\nnone\n\n\n示例\n  &#123;\n    \"@typescript-eslint/no-unsafe-assignment\": \"error\"\n&#125;\n\nno-unsafe-call\n官方地址\n\n描述\n\n禁止调用any类型的值。\n\n\n选项\n\nnone\n\n\n示例\n  &#123;\n    \"@typescript-eslint/no-unsafe-call\": \"error\"\n&#125;\n\nno-unsafe-member-access\n官方地址\n\n描述\n\n禁止成员访问any类型的值。\n\n\n选项\n\nnone\n\n\n示例\n  &#123;\n    \"@typescript-eslint/no-unsafe-member-access\": \"error\"\n&#125;\n\nno-unsafe-return\n官方地址\n\n描述\n\n禁止从函数返回any类型的值。\n\n\n选项\n\nnone\n\n\n示例\n  &#123;\n    \"@typescript-eslint/no-unsafe-return\": \"error\"\n&#125;\n\nno-useless-empty-export\n官方地址\n\n描述\n\n禁止不更改模块文件中任何内容的空导出。\n\n\n选项\n\nnone\n\n\n示例\n  &#123;\n    \"@typescript-eslint/no-useless-empty-export\": \"error\"\n&#125;\n\n@angular-eslint&#x2F;eslint-pluginno-empty-lifecycle-method\n官方地址\n\n描述\n\n禁止声明空生命周期方法\n\n\n选项\n\nnone\n\n\n示例\n  &#123;\n    \"@angular-eslint/no-empty-lifecycle-method\": [\"error\"]\n&#125;\n\nsort-ngmodule-metadata-arrays\n官方地址\n\n描述\n\n强制NgModule元数据按ASC字母顺序排序。\n\n\n选项\n  interface Options &#123;\n    // `BCP` 47 种语言标签。默认值：`en-US`。\n    locale?: string;\n&#125;\n\n示例\n  &#123;\n    \"@angular-eslint/sort-ngmodule-metadata-arrays\": [\"error\"]\n&#125;\n\ncomponent-class-suffix\n官方地址\n\n描述\n\n@Component 修饰的 class 必须以 Component(或自定义) 结尾。\n\n\n选项\n  interface Options &#123;\n    /**\n     * 默认值: `[\"Component\"]`\n    */\n    suffixes?: string[];\n&#125;\n\n示例\n  &#123;\n    \"@angular-eslint/component-class-suffix\": [\"error\"]\n&#125;\n\ndirective-class-suffix\n官方地址\n\n描述\n\n@Directive 修饰的 class 必须以 Directive(或自定义) 结尾。\n\n\n选项\n   interface Options &#123;\n    /**\n     * 默认值: `[\"Component\"]`\n    */\n    suffixes?: string[];\n&#125;\n\n示例\n  &#123;\n    \"@angular-eslint/directive-class-suffix\": [\"error\"]\n&#125;\n\ncomponent-selector\n官方地址\n\n描述\n\n组件选择器必须遵循指定的命名规则。\n\n\n选项\n  interface Options &#123;\n    type?: string | (\"element\" | \"attribute\")[];\n    prefix?: string | unknown[];\n    style?: \"camelCase\" | \"kebab-case\";\n&#125;\n\n示例\n  &#123;\n    \"@angular-eslint/component-selector\": [\n        \"error\",\n        &#123;\n            \"type\": \"element\",\n            \"prefix\": \"sg\",\n            \"style\": \"kebab-case\"\n        &#125;\n    ]\n&#125;\n\nuse-injectable-provided-in\n官方地址\n\n描述\n\n使用 providedIn 使 Injectables 可以 tree-shakable。\n\n\n选项\n  interface Options &#123;\n    // 忽略的class名的正则表达式\n    ignoreClassNamePattern?: string;\n&#125;\n\n示例\n  &#123;\n    \"@angular-eslint/use-injectable-provided-in\": [\n        \"error\",\n        &#123;\n            \"ignoreClassNamePattern\": \"/Effects$/\"\n        &#125;\n    ]\n&#125;\n\ncontextual-decorator\n官方地址\n\n描述\n\n确保类在其主体中正确使用上下文装饰器。\n\n\n选项\n\n示例\n  &#123;\n    \"@angular-eslint/contextual-decorator\": [\"error\"]\n&#125;\n\ndirective-selector\n官方地址\n\n描述\n\n指令选择器命名必须遵循指定的规则\n\n\n选项\n  interface Options &#123;\n    type?: string | (\"element\" | \"attribute\")[];\n    prefix?: string | unknown[];\n    style?: \"camelCase\" | \"kebab-case\";\n&#125;\n\n\n示例\n  &#123;\n    \"@angular-eslint/directive-selector\": [\n        \"error\",\n        &#123;\n            \"type\": \"element\",\n            \"prefix\": \"app\",\n            \"style\": \"kebab-case\"\n        &#125;\n    ]\n&#125;\n\nno-attribute-decorator\n官方地址\n\n描述\n\n选项\n\n示例\n\n\nno-output-on-prefix\n官方地址\n\n描述\n\n选项\n\n示例\n\n\nno-pipe-impure\n官方地址\n\n描述\n\n选项\n\n示例\n\n\nno-queries-metadata-property\n官方地址\n\n描述\n\n选项\n\n示例\n\n\nno-lifecycle-call\n官方地址\n\n描述\n\n选项\n\n示例\n\n\ncomponent-max-inline-declarations\n官方地址\n\n描述\n\n选项\n\n示例\n\n\nno-forward-ref\n官方地址\n\n描述\n\n选项\n\n示例\n\n\nno-input-prefix\n官方地址\n\n描述\n\n选项\n\n示例\n\n\npipe-prefix\n官方地址\n\n描述\n\n选项\n\n示例\n\n\nno-output-native\n官方地址\n\n描述\n\n选项\n\n示例\n\n\nprefer-output-readonly\n官方地址\n\n描述\n\n选项\n\n示例\n\n\nrelative-url-prefix\n官方地址\n\n描述\n\n选项\n\n示例\n\n\nuse-component-selector\n官方地址\n\n描述\n\n选项\n\n示例\n\n\nuse-component-view-encapsulation\n官方地址\n\n描述\n\n选项\n\n示例\n\n\ncontextual-lifecycle\n官方地址\n\n描述\n\n选项\n\n示例\n\n\nprefer-on-push-component-change-detection\n官方地址\n\n描述\n\n选项\n\n示例\n\n\ntemplate&#x2F;banana-in-box\n官方地址\n\n描述\n\n选项\n\n示例\n\n\ntemplate&#x2F;accessibility-alt-text\n官方地址\n\n描述\n\n选项\n\n示例\n\n\ntemplate&#x2F;accessibility-elements-content\n官方地址\n\n描述\n\n选项\n\n示例\n\n\ntemplate&#x2F;accessibility-label-has-associated-control\n官方地址\n\n描述\n\n选项\n\n示例\n\n\ntemplate&#x2F;accessibility-table-scope\n官方地址\n\n描述\n\n选项\n\n示例\n\n\ntemplate&#x2F;accessibility-valid-aria\n官方地址\n\n描述\n\n选项\n\n示例\n\n\ntemplate&#x2F;click-events-have-key-events\n官方地址\n\n描述\n\n选项\n\n示例\n\n\ntemplate&#x2F;cyclomatic-complexity\n官方地址\n\n描述\n\n选项\n\n示例\n\n\ntemplate&#x2F;mouse-events-have-key-events\n官方地址\n\n描述\n\n选项\n\n示例\n\n\ntemplate&#x2F;no-any\n官方地址\n\n描述\n\n选项\n\n示例\n\n\ntemplate&#x2F;no-autofocus\n官方地址\n\n描述\n\n选项\n\n示例\n\n\ntemplate&#x2F;no-distracting-elements\n官方地址\n\n描述\n\n选项\n\n示例\n\n\ntemplate&#x2F;no-positive-tabindex\n官方地址\n\n描述\n\n选项\n\n示例\n\n\ntemplate&#x2F;use-track-by-function\n官方地址\n\n描述\n\n选项\n\n示例\n\n\ntemplate&#x2F;i18n\n官方地址\n\n描述\n\n选项\n\n示例\n\n\ntemplate&#x2F;attributes-order\n官方地址\n\n描述\n\n选项\n\n示例\n\n\n完整示例\nCheck what you want to copy to your config file\n.eslintrc.jsview rawmodule.exports = {\n    \"parserOptions\": {\n        \"ecmaFeatures\": {\n            \"modules\": true\n        },\n        \"project\": [\n            \"tsconfig.eslint.json\"\n        ],\n        \"ecmaVersion\": \"latest\",\n        \"sourceType\": \"module\",\n    },\n    \"parser\": \"@typescript-eslint/parser\",\n    \"extends\": [\n        \"eslint:recommended\",\n        \"plugin:@typescript-eslint/recommended\",\n    ],\n    \"plugins\": [\n        \"import\",\n        \"jsdoc\",\n        \"unicorn\",\n        \"prefer-arrow\",\n\n    ],\n    \"rules\": {\n        \"@typescript-eslint/array-type\": [\n            \"error\",\n            {\n                \"default\": \"generic\"\n            }\n        ],\n        \"@typescript-eslint/ban-ts-comment\": \"error\",\n        \"@typescript-eslint/ban-types\": [\n            \"error\",\n            {\n                \"types\": {\n                    \"Object\": {\n                        \"message\": \"Use {} instead.\"\n                    },\n                    \"String\": null\n                }\n            }\n        ],\n        \"@typescript-eslint/consistent-type-definitions\": \"error\",\n        \"@typescript-eslint/dot-notation\": \"off\",\n        \"@typescript-eslint/explicit-member-accessibility\": [\n            \"error\",\n            {\n                \"accessibility\": \"explicit\",\n                \"overrides\": {\n                    \"accessors\": \"explicit\",\n                    \"constructors\": \"explicit\",\n                    \"parameterProperties\": \"explicit\"\n                }\n            }\n        ],\n        \"@typescript-eslint/no-empty-function\": \"error\",\n        \"@typescript-eslint/no-for-in-array\": \"error\",\n        \"@typescript-eslint/no-inferrable-types\": \"off\",\n        \"@typescript-eslint/no-non-null-assertion\": \"off\",\n        \"@typescript-eslint/no-require-imports\": \"error\",\n        \"@typescript-eslint/no-this-alias\": \"error\",\n        \"@typescript-eslint/no-unnecessary-type-assertion\": \"off\",\n        \"@typescript-eslint/no-var-requires\": \"error\",\n        \"@typescript-eslint/prefer-for-of\": \"off\",\n        \"@typescript-eslint/prefer-readonly\": \"off\",\n        \"@typescript-eslint/strict-boolean-expressions\": [\n            \"off\",\n            {\n                \"allowNullable\": true\n            }\n        ],\n        \"arrow-body-style\": [\n            \"error\",\n            \"as-needed\"\n        ],\n        \"arrow-parens\": [\n            \"error\",\n            \"as-needed\"\n        ],\n        \"brace-style\": [\n            \"error\",\n            \"1tbs\"\n        ],\n        \"class-methods-use-this\": \"off\",\n        \"comma-dangle\": [\n            \"error\",\n            \"always-multiline\"\n        ],\n        \"complexity\": [\n            \"error\",\n            {\n                \"max\": 45\n            }\n        ],\n        \"default-case\": \"error\",\n        \"eqeqeq\": [\n            \"off\",\n            \"always\"\n        ],\n        \"import/no-default-export\": \"error\",\n        \"import/no-extraneous-dependencies\": \"off\",\n        \"import/no-internal-modules\": \"off\",\n        \"import/no-unassigned-import\": \"off\",\n        \"import/order\": \"error\",\n        \"linebreak-style\": [\n            \"error\",\n            \"unix\"\n        ],\n        \"max-classes-per-file\": [\n            \"error\",\n            1\n        ],\n        \"max-len\": [\n            \"off\",\n            {\n                \"code\": 120\n            }\n        ],\n        \"max-lines\": [\n            \"off\",\n            300\n        ],\n        \"newline-per-chained-call\": \"off\",\n        \"no-duplicate-case\": \"error\",\n        \"no-empty\": [\n            \"error\",\n            {\n                \"allowEmptyCatch\": true\n            }\n        ],\n        \"no-extra-bind\": \"error\",\n        \"no-invalid-this\": \"error\",\n        \"no-irregular-whitespace\": \"error\",\n        \"no-magic-numbers\": \"off\",\n        \"no-multiple-empty-lines\": \"error\",\n        \"no-new-func\": \"error\",\n        \"no-param-reassign\": \"off\",\n        \"no-plusplus\": \"error\",\n        \"no-redeclare\": \"error\",\n        \"no-return-await\": \"error\",\n        \"no-sequences\": \"error\",\n        \"no-sparse-arrays\": \"error\",\n        \"no-template-curly-in-string\": \"error\",\n        \"no-void\": \"error\",\n        \"padding-line-between-statements\": [\n            \"off\",\n            {\n                \"blankLine\": \"always\",\n                \"prev\": \"*\",\n                \"next\": \"return\"\n            }\n        ],\n        \"prefer-const\": [\n            \"off\",\n            {\n                \"destructuring\": \"all\"\n            }\n        ],\n        \"prefer-object-spread\": \"error\",\n        \"prefer-template\": \"error\",\n        \"quote-props\": [\n            \"error\",\n            \"consistent\"\n        ],\n        \"space-before-function-paren\": [\n            \"error\",\n            {\n                \"anonymous\": \"always\",\n                \"named\": \"never\",\n                \"asyncArrow\": \"always\"\n            }\n        ],\n        \"space-in-parens\": [\n            \"error\",\n            \"never\"\n        ],\n        \"unicorn/filename-case\": \"error\",\n        \"yoda\": \"error\"\n    },\n    \"overrides\": [\n        {\n            \"files\": [\n                \"*.component.ts\"\n            ],\n            \"plugins\": [\n                \"@angular-eslint/eslint-plugin-template\",\n                \"@angular-eslint\",\n            ],\n            \"rules\": {\n                \"@angular-eslint/no-empty-lifecycle-method\": \"error\",\n                \"@angular-eslint/sort-ngmodule-metadata-arrays\": \"error\",\n                \"@angular-eslint/component-class-suffix\": [\n                    \"error\",\n                    {\n                        \"suffixes\": [\n                            \"Component\"\n                        ]\n                    }\n                ],\n                \"@angular-eslint/directive-class-suffix\": [\n                    \"error\",\n                    {\n                        \"suffixes\": [\n                            \"Directive\"\n                        ]\n                    }\n                ],\n                \"@angular-eslint/component-selector\": [\n                    \"error\",\n                    {\n                        \"type\": \"element\",\n                        \"prefix\": \"\",\n                        \"style\": \"kebab-case\"\n                    }\n                ],\n                \"@angular-eslint/use-injectable-provided-in\": \"error\",\n                \"@angular-eslint/contextual-decorator\": \"error\",\n                \"@angular-eslint/component-selector\": [\n                    \"error\",\n                    {\n                        \"type\": \"element\",\n                        \"prefix\": \"\",\n                        \"style\": \"kebab-case\"\n                    }\n                ],\n                \"@angular-eslint/use-injectable-provided-in\": \"error\",\n                \"@angular-eslint/contextual-decorator\": \"error\",\n\n                \"@angular-eslint/directive-selector\": [\n                    \"error\",\n                    {\n                        \"type\": \"attribute\",\n                        \"prefix\": \"\",\n                        \"style\": \"camelCase\"\n                    }\n                ],\n                \"@angular-eslint/no-attribute-decorator\": \"error\",\n                \"@angular-eslint/no-output-on-prefix\": \"error\",\n                \"@angular-eslint/no-pipe-impure\": \"error\",\n                \"@angular-eslint/no-queries-metadata-property\": \"error\",\n                \"@angular-eslint/no-lifecycle-call\": \"off\",\n                \"@angular-eslint/component-max-inline-declarations\": \"off\",\n\n                \"@angular-eslint/no-forward-ref\": \"off\",\n                \"@angular-eslint/no-input-prefix\": [\n                    \"off\",\n                    {\n                        \"prefixes\": [\n                            \"can\",\n                            \"is\",\n                            \"should\",\n                            \"has\"\n                        ]\n                    }\n                ],\n\n                \"@angular-eslint/pipe-prefix\": \"off\",\n                \"@angular-eslint/no-output-native\": \"error\",\n                \"@angular-eslint/prefer-output-readonly\": \"error\",\n                \"@angular-eslint/relative-url-prefix\": \"error\",\n                \"@angular-eslint/use-component-selector\": \"error\",\n                \"@angular-eslint/use-component-view-encapsulation\": \"error\",\n                \"@angular-eslint/contextual-lifecycle\": [\n                    \"error\"\n                ],\n                \"@angular-eslint/prefer-on-push-component-change-detection\": \"error\",\n                \"@typescript-eslint/await-thenable\": \"error\",\n                \"@typescript-eslint/no-unnecessary-boolean-literal-compare\": \"error\",\n                \"@typescript-eslint/no-unnecessary-qualifier\": \"error\",\n                \"@typescript-eslint/no-unnecessary-type-arguments\": \"error\",\n                \"@typescript-eslint/promise-function-async\": \"error\",\n            }\n        },\n        {\n            \"files\": [\n                \"*.ts\"\n            ],\n            \"parser\": \"@typescript-eslint/parser\",\n            \"plugins\": [\n                \"@typescript-eslint\",\n            ],\n            \"rules\": {\n                \"@typescript-eslint/restrict-plus-operands\": \"error\",\n                \"@typescript-eslint/unbound-method\": \"error\",\n                \"import/no-deprecated\": \"error\",\n                \"no-useless-constructor\": \"error\",\n                \"@typescript-eslint/no-unused-vars\": \"error\"\n            }\n        },\n        {\n            \"files\": [\n                \"*.html\"\n            ],\n            \"parser\": \"@angular-eslint/template-parser\",\n            \"rules\": {\n                \"@angular-eslint/template/banana-in-box\": \"error\",\n                \"@angular-eslint/template/accessibility-alt-text\": \"off\",\n                \"@angular-eslint/template/accessibility-elements-content\": \"off\",\n                \"@angular-eslint/template/accessibility-label-has-associated-control\": \"off\",\n                \"@angular-eslint/template/accessibility-table-scope\": \"off\",\n                \"@angular-eslint/template/accessibility-valid-aria\": \"off\",\n                \"@angular-eslint/template/click-events-have-key-events\": \"off\",\n                // \"@angular-eslint/template/conditional-complexity\": [\n                //     \"error\",\n                //     {\n                //         \"maxComplexity\": 5\n                //     }\n                // ],\n                \"@angular-eslint/template/cyclomatic-complexity\": \"off\",\n                \"@angular-eslint/template/mouse-events-have-key-events\": \"error\",\n                \"@angular-eslint/template/no-any\": \"error\",\n                \"@angular-eslint/template/no-autofocus\": \"error\",\n                // some bug when use function call in template\n                // \"@angular-eslint/template/no-call-expression\": \"error\",\n                \"@angular-eslint/template/no-distracting-elements\": \"error\",\n                \"@angular-eslint/template/no-positive-tabindex\": \"off\",\n                \"@angular-eslint/template/use-track-by-function\": \"off\",\n                \"@angular-eslint/template/i18n\": \"off\",\n                \"@angular-eslint/template/attributes-order\": \"error\"\n                // \"@angular-eslint/template/i18n\": [\n                //     \"error\",\n                //     {\n                //         \"requireDescription\": true\n                //     }\n                // ]\n            }\n        }\n    ]\n}\n\n\n","slug":"frontend/eslint-angular","date":"2023-04-01T00:00:00.000Z","categories_index":"FRONTEND","tags_index":"angular,javascript,eslint,typescript","author_index":"Kidwen"},{"id":"587ccc5993ea7af286d7fe7fba152d8c","title":"javascript type check","content":"In this article, How to Check the Type of a Variable or Object in JavaScript? In JavaScript, the typeof operator is used to determine the typeof an object or variable. JavaScript, on the other hand, is a dynamically typed (or weakly typed) language. This indicates that a variable can have any type of value. The type of the value assigned to a variable determines the type of the variable.\nCheck Undefinedconst variable = undefined;\n\ntypeof variable; // 'undefined'\n// or\nObject.prototype.toString.call(variable); // '[object Undefined]'\nCheck Nullconst empty = null;\n\nempty === null; // true\n// or\nObject.prototype.toString.call(empty); // '[object Null]'\n\nCheck Arrayconst arr = [];\n\narr instanceof Array; // true\n// or\nArray.isArray(arr); // true\n// or\nObject.prototype.toString.call(arr); // '[object Array]'\n\nCheck Mapconst map = new Map();\n\nObject.prototype.toString.call(map); // '[object Map]'\n\nCheck Booleanconst bool = true;\n\nObject.prototype.toString.call(bool); // '[object Boolean]'\n\nCheck Numberconst num = 1;\n\nObject.prototype.toString.call(num); // '[object Number]'\n\nCheck Stringconst str = 'str';\n\nObject.prototype.toString.call(str); // '[object String]'\n\nCheck Symbolconst sym = Symbol('sym');\n\nObject.prototype.toString.call(sym); // '[object Symbol]'\n\nCheck Objectconst obj = &#123;&#125;;\n\nObject.prototype.toString.call(obj); // '[object Object]'\n\nCheck Functionfunction fn () &#123;&#125;;\n// or\nconst fn = () => &#123;&#125;;\n// or\nconst fn = function () &#123;&#125;;\n\nObject.prototype.toString.call(fn); // '[object Function]'\n// or\ntypeof fn; // 'function'\n\nCheck Errorconst err = new Error();\n\nObject.prototype.toString.call(err); // '[object Error]'\n\nCheck RegExpconst reg = new RegExp();\n\nObject.prototype.toString.call(reg); // '[object RegExp]'\n\nCheck MathObject.prototype.toString.call(Math); // '[object Math]'\n\nCheck Documentconst doc = new Document();\n\nObject.prototype.toString.call(doc); // '[object Document]'\n\nCheck WindowObject.prototype.toString.call(window); // '[object Window]'\n","slug":"frontend/type-check","date":"2023-03-23T08:00:00.000Z","categories_index":"FRONTEND","tags_index":"javascript","author_index":"Kidwen"},{"id":"2b246af8e1856d1e6c5516541b419cd5","title":"http server","content":"http-server is a simple, zero-configuration command-line static HTTP server. It is powerful enough for production usage, but it’s simple and hackable enough to be used for testing, local development and learning.\nInstallnpm i -g http-server\n\nUse# default ./public or ./\nhttp-server ./views\n","slug":"frontend/http-server","date":"2023-03-22T06:00:00.000Z","categories_index":"FRONTEND","tags_index":"server","author_index":"Kidwen"},{"id":"ab96f0de050fe2a435af431c84a21f25","title":"npm/yarn proxy/registry","content":"npm stands for Node Package Manager. It’s a library and registry for JavaScript software packages. npm also has command-line tools to help you install the different packages and manage their dependencies.Yarn is a package manager that doubles down as project manager. Whether you work on one-shot projects or large monorepos, as a hobbyist or an enterprise user, we’ve got you covered.\nNPMShow config# show all config\nnpm config ls -l\n# or\nnpm get proxy\n\nSet proxynpm config set proxy=http://127.0.0.1:10809\n\nCancle proxynpm config delete proxy\n\nSet registrynpm config set registry https://registry.npmmirror.com\n\nYarnShow configyarn config list\n# or\nyarn config get proxy\n\nSet proxyyarn config set proxy http://127.0.0.1:10809\n\nCancle proxyyarn config delete proxy\n\nSet registryyarn config set registry https://registry.npmmirror.com\n","slug":"proxy/npm-yarn","date":"2023-03-20T08:12:22.000Z","categories_index":"PROXY,REGISTRY","tags_index":"npm,yarn","author_index":"Kidwen"},{"id":"ade9b33a0b798288cc1a002920982285","title":"powershell proxy","content":"PowerShell is a task automation and configuration management program from Microsoft, consisting of a command-line shell and the associated scripting language.\nShownetsh winhttp show proxy\n\nSetnetsh winhttp set proxy 127.0.0.1:10808\n\nCanclenetsh winhttp reset proxy\n","slug":"proxy/powershell","date":"2023-03-20T08:10:22.000Z","categories_index":"PROXY","tags_index":"powershell","author_index":"Kidwen"},{"id":"e45789ed6a6c4dccaf366d2080a7ca21","title":"webpack","content":"Webpack is a module bundler. Its main purpose is to bundle JavaScript files for usage in a browser, yet it is also capable of transforming, bundling, or packaging just about any resource or asset.\nConfig\nCheck what you want to copy to your config file\nwebpack.config.jsview rawconst path = require('path');\nmodule.exports = {\n    // entry 表示入口，Webpack 执行构建的第一步将从 Entry 开始，可抽象成输入\n    // 类型可以是 string、object、array\n    entry: './app/entry', // 只有 1 个入口，入口只有 1 个文件\n    entry: ['./app/entry1', './app/entry2'], // 只有 1 个入口，入口有两个文件\n    entry: { // 有两个入口\n        a: './app/entry-a',\n        b: ['./app/entry-b1', './app/entry-b2']\n    },\n    // 如何输出结果：在 webpack 经过一系列处理后，如何输出最终想要的代码\n    output: {\n        // 输出文件存放的目录，必须是 string 类型的绝对路径\n        path: path.resolve(__dirname, 'dist'),\n        // 输出文件的名称\n        filename: 'bundle.js', // 完整的名称\n        filename: '[name].js', // 在配置了多个 entry 时，通过名称模板为不同的 entry 生成不同的文件名称\n        filename: '[chunkhash].js', // 根据文件内容的 hash 值生成文件的名称，用于浏览器长期缓存文件\n        // 发布到线上的所有资源的 URL 前缀，为 string 类型\n        publicPath: '/assets/', // 放到指定目录下\n        publicPath: '', // 放到根目录下\n        publicPath: 'https://cdn.example.com', // 放到 CDN 上\n        // 导出库的名称，为 string 类型\n        // 不填它时，默认的输出格式是匿名的立即执行函数\n        library: 'MyLibrary',\n        // 导出库的类型，为枚举类型，默认是 var\n        // 可以是 umd、umd2、commonjs、commonjs2、amd、this、var、assign、window、global、jsonp\n        libraryTarget: 'umd',\n        // 是否包含有用的文件路径信息到生成的代码里，为 boolean 类型\n        pathinfo: true,\n        // 附加 Chunk 的文件名称\n        chunkFilename: '[id].js',\n        chunkFilename: '[chunkhash].js',\n        // JSONP 异步加载资源时的回调函数名称，需要和服务端搭配使用\n        jsonpFunction: 'myWebpackJsonp',\n        // 生成的 Source Map 文件的名称\n        sourceMapFilename: '[file].map',\n        // 浏览器开发工具里显示的源码模块名称\n        devtoolModuleFilenameTemplate: 'webpack:///[resource-path]',\n        // 异步加载跨域的资源时使用的方式\n        crossOriginLoading: 'use-credentials',\n        crossOriginLoading: 'anonymous',\n        crossOriginLoading: false\n    },\n    // 配置模块相关\n    module: {\n        rules: [ // 配置 Loader\n            {\n                test: /\\.jsx?$/, // 正则匹配命中要使用 Loader 的文件\n                include: [ // 只会命中这里面的文件\n                    path.resolve(__dirname, 'app')\n                ],\n                exclude: [ // 忽略这里面的文件\n                    path.resolve(__dirname, 'app/demo-files')\n                ],\n                use: [ // 使用哪些 Loader，有先后次序，从后向前执行\n                    'style-loader', // 直接使用 Loader 的名称\n                    {\n                        loader: 'css-loader',\n                        options: { // 向 html-loader 传一些参数\n                        }\n                    }\n                ]\n            },\n        ],\n        noParse: [ // 不用解析和处理的模块\n            /special-library\\.js$/ // 用正则匹配\n        ]\n    },\n    // 配置插件\n    plugins: [],\n    // 配置寻找模块的规则\n    resolve: {\n        modules: [ // 寻找模块的根目录，为 array 类型，默认以 node_modules 为跟目录\n            'node_modules',\n            path.resolve(__dirname, 'app')\n        ],\n        extensions: ['.js', '.json', '.jsx', '.css'], // 模块的后缀名\n        alias: { // 模块别名配置，用于映射模块\n            // 将 'module' 映射成 'new-module'，同样，'module/path/file' 也会映射成 'new-module/path/file'\n            'module': 'new-module',\n            // 使用结尾符号$后，将 'only-module' 映射成 'new-module',\n            // 但不像上面的，'module/path/file' 不会映射成 'new-module/path/file'\n            'only-module$': 'new-module'\n        },\n        alias: [ // alias 还支持使用数组来更详细地进行配置\n            {\n                name: 'module', // 老模块\n                alias: 'new-module', // 新模块\n                // 是否只映射模块，如果是 true ，则只有 'module' 会被映射；如果是 false ，则 'module/inner/path' 也会被映射\n                onlyModule: true\n            }\n        ],\n        symlinks: true, // 是否根随文件的软链接去搜寻模块的路径\n        descriptionFiles: ['package.json'], // 模块的描述文件\n        mainFields: ['main'], // 模块的描述文件里描述入口的文件的字段名\n        enforceExtension: false, // 是否强制导入语句写明文件\n    },\n    // 输出文件的性能检查配置\n    performance: {\n        hints: 'warning', // 有性能问题时输出警告\n        hints: 'error', // 有性能问题时输出错误\n        hints: false, // 关闭性能检查\n        maxAssetSize: 200000, // 最大文件的大小（单位为 bytes）\n        maxEntryPointSize: 400000, // 最大入口文件的大小（单位为 bytes）\n        assetFilter: function(assetFilename) { // 过滤要检查的文件\n            return assetFilename.endsWith('.css') || assetFilename.endsWith('.js');\n        }\n    },\n    devtool: 'source-map', // 配置 source-map 类型\n    context: __dirname, // Webpack 使用的根目录，string 类型必须是绝对路径\n    // 配置输出代码的运行环境\n    target: 'web', // 浏览器，默认\n    target: 'webworker', // WebWorker\n    target: 'node', // Node.js，使用 `require` 语句加载 Chunk 代码\n    target: 'async-node', // Node.js，异步加载 Chunk 代码\n    target: 'node-webkit', // nw.js\n    target: 'electron-main', // electron，主线程\n    target: 'electron-renderer', // electron，渲染线程\n    externals: { // 使用来自 JavaScript 运行环境提供的全局变量\n        jquery: 'jQuery'\n    },\n    stats: { // 控制台输出日志控制\n        assets: true,\n        colors: true,\n        errors: true,\n        errorDetails: true,\n        hash: true\n    },\n    devServer: { // DevServer 相关的配置\n        proxy: { // 代理到后端服务接口\n            '/api': 'http://localhost:3000'\n        },\n        contentBase: path.join(__dirname, 'public'), // 配置 DevServer HTTP 服务器的文件根目录\n        compress: true, // 是否开启 Gzip 压缩\n        historyApiFallback: true, // 是否开发 HTML5 History API 网页\n        hot: true, // 是否开启模块热替换功能\n        https: false, // 是否开启 HTTPS 模式\n        profile: true, // 是否捕捉 Webpack 构建的性能信息，用于分析是什么原因导致构建性能不佳\n        cache: false, // 是否启用缓存来提升构建速度\n        watch: true, // 是否开始\n        watchOptions: { // 监听模式选项\n            // 不监听的文件或文件夹，支持正则匹配，默认为空\n            ignored: /node_modules/,\n            // 监听到变化后，等 300ms 再执行动作，截流，防止文件更新太快导致重新编译频率太快。默认为 300ms\n            aggregateTimeout: 300,\n            // 不停的询问系统指定的文件有没有发生变化，默认每秒询问 1000 次\n            poll: 1000\n        }\n    },\n}\n\n\n","slug":"tools/webpack","date":"2023-03-20T04:13:22.000Z","categories_index":"TOOL","tags_index":"build","author_index":"Kidwen"},{"id":"234ca5fd8ee7c41e1376bd4bc2b2e5c4","title":"develope with hexo","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick Start# install hexo global\nnpm i -g hexo-cli\n\n# goto workspace\nnpm i\n# or\nyarn\n\n\n\n\n\n\n\n\nremove the comments list\ngoto node-modules/hexo-theme-aurora/source/static/js/app.6d2c358d.js and delete ye.render = ie;\n\nCreate a new posthexo new 'My New Post'\n# or\nhexo n page 'My New Page'\n\nMore info: Writing\nRun serveryarn start\n\nMore info: Server\nMore info: Generating\nDeploy to remote sitesyarn deploy\n\nMore info: Deployment\n","slug":"hexo","date":"2023-03-15T08:10:22.000Z","categories_index":"ARTICLE","tags_index":"doc","author_index":"Kidwen"}]