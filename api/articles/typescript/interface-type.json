{"title":"Types vs interfaces","uid":"59c81fa299a5b5a3e4d483bdbaaf4a4b","slug":"typescript/interface-type","date":"2023-09-06T02:30:00.000Z","updated":"2023-09-06T03:40:30.995Z","comments":true,"path":"api/articles/typescript/interface-type.json","keywords":null,"cover":"/images/type-interface.png","content":"<p>在 TypeScript 中，有两种主要的工具来声明对象的形状，即接口（interfaces）和类型别名（type aliases）。<br>它们非常相似，对于大多数常见情况，它们的行为都是相同的。<br>由于 TypeScript 是一种结构类型系统，因此可以混合使用它们。</p>\n<h3 id=\"相似之处\"><a href=\"#相似之处\" class=\"headerlink\" title=\"相似之处\"></a>相似之处</h3><ol>\n<li><p><strong>用途相似</strong>: 类型别名和接口都用于声明和定义对象的形状或结构，以及自定义类型。</p>\n</li>\n<li><p><strong>扩展性</strong>: 它们都支持扩展其他接口和类型，以帮助组织和重用代码。</p>\n</li>\n<li><p><strong>混合使用</strong>: 由于 TypeScript 的结构类型系统，您可以混合使用它们，并根据需要选择使用接口或类型别名。</p>\n</li>\n</ol>\n<h3 id=\"不同之处\"><a href=\"#不同之处\" class=\"headerlink\" title=\"不同之处\"></a>不同之处</h3><ol>\n<li><p><strong>开放性 vs 封闭性</strong>: 接口是开放的（open），可以在不同地方多次声明并扩展，而类型别名是封闭的（closed），一旦声明后无法在外部进行修改。</p>\n</li>\n<li><p><strong>错误消息</strong>: 通常情况下，使用接口会得到更清晰和更详细的错误消息，有助于更容易地诊断问题。</p>\n</li>\n<li><p><strong>关键字</strong>: 接口使用关键字 interface 来声明，而类型别名使用关键字 type 来声明。</p>\n</li>\n<li><p><strong>适用场景</strong>: 对于公开暴露的类型，特别是用于定义公共 API 的类型，更推荐使用接口，而类型别名可以更适用于描述固定和不变的类型结构。</p>\n</li>\n</ol>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">type BirdType &#x3D; &#123;\n    wings: 2;\n&#125;;\n\ninterface BirdInterface &#123;\n    wings: 2;\n&#125;;\n\nconst bird1: BirdType &#x3D; &#123; wings: 2 &#125;;\nconst bird2: BirdInterface &#x3D; &#123; wings: 2 &#125;;\n\nconst bird3: BirdInterface &#x3D; bird1;\n\n&#x2F;&#x2F; 它们都支持扩展其他接口和类型。\n&#x2F;&#x2F; 类型别名通过交叉类型（intersection types）实现这一点，而接口则使用一个关键字。\n\ntype Owl &#x3D; &#123; nocturnal: true &#125; &amp; BirdType;\ntype Robin &#x3D; &#123; nocturnal: false &#125; &amp; BirdInterface;\n\ninterface Peacock extends BirdType &#123;\n    colourful: true;\n    flies: false;\n&#125;;\n\ninterface Chicken extends BirdInterface &#123;\n    colourful: false;\n    flies: false;\n&#125;;\n\nlet owl: Owl &#x3D; &#123; wings: 2, nocturnal: true &#125;;\nlet chicken: Chicken &#x3D; &#123; wings: 2, colourful: false, flies: false &#125;;\n\n&#x2F;&#x2F; 尽管如此，建议是在使用时选择接口而不是类型别名。具体来说，因为接口定义可以获得更好的错误消息。\n&#x2F;&#x2F; 鼠标悬停在以下错误上方，可以看到 TypeScript 在使用像 Chicken 这样的接口时如何提供更简洁和更专注的错误消息。\n\nowl &#x3D; chicken;\nchicken &#x3D; owl;\n\n&#x2F;&#x2F; 类型别名和接口之间的一个主要区别是，接口是开放的（open），而类型别名是封闭的（closed）。\n&#x2F;&#x2F; 在不同的地方可以多次声明同一个接口，并在每次声明时扩展它。\n&#x2F;&#x2F; 这种方式允许您在不同部分的代码中逐渐增加接口的属性和方法，而不需要修改原始接口的定义。\n\ninterface Kitten &#123;\n    purrs: boolean;\n&#125;\n\ninterface Kitten &#123;\n    colour: string;\n&#125;\n\n&#x2F;&#x2F; 在另一种情况下，类型别名在其声明之外无法更改。\n\ntype Puppy &#x3D; &#123;\n    color: string;\n&#125;;\n\n&#x2F;&#x2F; error message:\n&#x2F;&#x2F; Duplicate identifier &#39;Puppy&#39;.(2300)\ntype Puppy &#x3D; &#123;\n    toys: number;\n&#125;;\n\n&#x2F;&#x2F; 根据您的目标，这种差异可能是积极的也可能是消极的。\n&#x2F;&#x2F; 但是，对于公开暴露的类型，更好的做法是将它们定义为接口。\n&#x2F;&#x2F; 查看 Stack Overflow 可以了解更多关于类型别名和接口之间的各种边界情况:\n&#x2F;&#x2F; https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;37233735&#x2F;typescript-interfaces-vs-types&#x2F;52682220#52682220\n</code></pre>\n\n<details class=\"custom-details\">\n<summary>Output</summary>\n<p><pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&quot;use strict&quot;;\nconst bird1 &#x3D; &#123; wings: 2 &#125;;\nconst bird2 &#x3D; &#123; wings: 2 &#125;;\nconst bird3 &#x3D; bird1;\nlet owl &#x3D; &#123; wings: 2, nocturnal: true &#125;;\nlet chicken &#x3D; &#123; wings: 2, colourful: false, flies: false &#125;;\n\n&#x2F;&#x2F; error message:\n&#x2F;&#x2F; Type &#39;Chicken&#39; is not assignable to type &#39;Owl&#39;.\n&#x2F;&#x2F;     Property &#39;nocturnal&#39; is missing in type &#39;Chicken&#39; but required in type &#39;&#123; nocturnal: true; &#125;&#39;.(2322)\n&#x2F;&#x2F; input.tsx(row num, column num): &#39;nocturnal&#39; is declared here.\nowl &#x3D; chicken;\n\n&#x2F;&#x2F; error message:\n&#x2F;&#x2F; Type &#39;Owl&#39; is missing the following properties from type &#39;Chicken&#39;: colourful, flies(2739)\nchicken &#x3D; owl;</code></pre>\n</p>\n</details>\n<br />\n\n<details class=\"custom-details\">\n<summary>Compiler Options</summary>\n<p><pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n    &quot;compilerOptions&quot;: &#123;\n        &quot;strict&quot;: true,\n        &quot;noImplicitAny&quot;: true,\n        &quot;strictNullChecks&quot;: true,\n        &quot;strictFunctionTypes&quot;: true,\n        &quot;strictPropertyInitialization&quot;: true,\n        &quot;strictBindCallApply&quot;: true,\n        &quot;noImplicitThis&quot;: true,\n        &quot;noImplicitReturns&quot;: true,\n        &quot;alwaysStrict&quot;: true,\n        &quot;esModuleInterop&quot;: true,\n        &quot;declaration&quot;: true,\n        &quot;target&quot;: &quot;ES2017&quot;,\n        &quot;jsx&quot;: &quot;react&quot;,\n        &quot;module&quot;: &quot;ESNext&quot;,\n        &quot;moduleResolution&quot;: &quot;node&quot;\n    &#125;\n&#125;</code></pre>\n</p>\n</details>\n<p><strong>Playground Link:</strong> <a href=\"https://www.typescriptlang.org/zh/play#code/PTAEBUAsFMCdtAQ3qALgdwPagLaIJYB2ammANgM4mgAm0AxmcgqjKBZIgA4KYBmSQgCgQoTACMAVg1QAuUEVRw+ietCqJCNNAE8eSMvkQV1AOhHALEGDqQoAbnFsV8OfE1gAaQdr6ZYaGw4mBSooPSYOMHE9MbqVqphrAgUiDjQ5kKoeggAQviwNOA5oAC8oADeQqCg6EQA5hTyAEwA3EIAvu1CisqqeQU0AJKESrAqapXVtQ1NoG2dQkIRhKGg4oMAjPL5hcX65RUzhI0toF3LmKthG4XNO4MjYxMIh8en8+fdorkMiACuJggOQAyvRYPguGF8Bp2KhYP96Kh-rBEGRdPoKDpQtAcJ4rPhUAByKhcEIucRkFjYXqwNwAD0C0AKoEB1MwmRWa1uNAAzA9Ck8+pNyjzNt8wFBoLZxJhWOx-lwybAwtB6UotA0xMkArSXhotBizFZ9gg0UYTFQaNhWDDQPYjApRnATEj8FcjRRvOhIO5oATneN+lROI4kKAANbSrCFTLZfQAeXQ6LehEwSJRhDR8nh-wQHVAADJQLsijl2vGEAAlCREMqVUBpjOwLNkeQqSj5oslx6Bl7dPX9UAABWgqnTEdAao1NCopdNUxqETImBRfH+bbQCOg7RqfEM6nbaJM7Q6PT7Q4Awr76FHiNPoFo573nkOqkvyKvxhuj53d6B93wQ8AOPHdFiEKkwkwZN5CTFMGzqE45mabwm2RFtsy3PMvgg6AwnoG873ka98FvR96yORCPhQ8JPzXH8QM7bxAOAjsgQuE1ODCVJ8Bob0EHgCIokfbQdFXVkgUHNQqEwRwAkrBJDDiChTFAEEeHofA+FItEyB0bxxD+NlQDE-4ZjIdF6jw9Y8LGKdYFgfwrHSChUislTQCGARTNASBZLgMQ5KZADyBXKj7Mc2AvRM8TYmEUQTAQPz0GBHgwQhKFwk0UAuEch06DQF0As0bRghQPx6DZGhnPUNz1FqGBiBjCMtTqeUpPqwwo1AEiyMITJoPggjSLvdphr6+tBolUAE0IBA8EkfxaC0vg4EfSZDIwaByMrAwLXq+wqA6igEhQVhEGhC9pLsXgeGIEqjT25SbvCFcTBocxRCgO10k0KgfLiqd1REwQnVfDbbDoRhkC1QkEnYBgrm0VBXAyJYOtAABpQkNUXHKUSi+RZXIMdCFPdGroQbHUFx99aJXFF5FCCETnJqwRmCuUYACWIgUQR64rTG4EAIzQrO0VdUBcAr+AJKXaAYDwLvdfqll24dFS4WxDmmZd-CZ+EGlPbp1c17W8dQTBsXkQh-hwQzYGNpZRAAEWgO6aC1D1TICepMGPbxbStFa1sISYIg3bRDKQKwyRcFGwyW-m5vqZXHFUgAJaDoCCvwAi4f5KVIvSgbj6BqtEStosJElw02uzYgs6g8G65IcFBjrMlEWbeAEZIbLWeAKC-a684R5kTgMdF+GC8urKsXn6uQVdDSr+0jsp6Kg7hVRJ388YwqsVh4EQbQ7X5v3MG0LgmEmS2d5VWRnbASAaa4JoQFCXf9-3aDTCE4AABHPMoQVYUGALyAA7M0XkUDeQAFZgBV3BJCVAABaY6aDDpoKrsAeBzQABsAAOZopCAAMABifBxDSHNDIUIIAA\">Provided</a></p>\n","text":"在 TypeScript 中，有两种主要的工具来声明对象的形状，即接口（interfaces）和类型别名（type aliases）。它们非常相似，对于大多数常...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"TYPESCRIPT","slug":"TYPESCRIPT","count":1,"path":"api/categories/TYPESCRIPT.json"}],"tags":[{"name":"typescript","slug":"typescript","count":2,"path":"api/tags/typescript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9B%B8%E4%BC%BC%E4%B9%8B%E5%A4%84\"><span class=\"toc-text\">相似之处</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8D%E5%90%8C%E4%B9%8B%E5%A4%84\"><span class=\"toc-text\">不同之处</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">示例</span></a></li></ol>","author":{"name":"Kidwen","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/38277891?v=4","link":"/","description":"Frontend","socials":{"github":"https://github.com/kidwen","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"响应式主题","uid":"26df78b12ea8461da2d0f20e21f4a6a9","slug":"frontend/theming","date":"2023-06-15T05:30:00.000Z","updated":"2023-07-31T08:33:52.918Z","comments":true,"path":"api/articles/frontend/theming.json","keywords":null,"cover":"/images/theming.jpeg","text":"将页面自适应匹配用户的喜好，例如黑色模式 可以调整网站的展示以匹配用户的喜好。首先，需要知道如何借力浏览器来增加网站曝光从而提高品牌知名度。 自定义浏览器界面一...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"FRONTEND","slug":"FRONTEND","count":6,"path":"api/categories/FRONTEND.json"}],"tags":[{"name":"theming","slug":"theming","count":1,"path":"api/tags/theming.json"}],"author":{"name":"Kidwen","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/38277891?v=4","link":"/","description":"Frontend","socials":{"github":"https://github.com/kidwen","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"stable diffusion prompt","uid":"fb3363481004ec8369d06d0e47a49849","slug":"ai/prompt","date":"2023-09-04T03:00:00.000Z","updated":"2023-09-04T06:04:23.949Z","comments":true,"path":"api/articles/ai/prompt.json","keywords":null,"cover":"/images/prompt.jpeg","text":"The first step to gennerate a image is to write a series of prompt. The prompt i...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"AI","slug":"AI","count":1,"path":"api/categories/AI.json"}],"tags":[{"name":"propmt","slug":"propmt","count":1,"path":"api/tags/propmt.json"}],"author":{"name":"Kidwen","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/38277891?v=4","link":"/","description":"Frontend","socials":{"github":"https://github.com/kidwen","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}