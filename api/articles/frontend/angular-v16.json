{"title":"angular v16 signal 介绍","uid":"a7b5aeb1d279a19d567b0b432761bc79","slug":"frontend/angular-v16","date":"2023-07-13T03:00:00.000Z","updated":"2023-07-14T09:25:26.614Z","comments":true,"path":"api/articles/frontend/angular-v16.json","keywords":null,"cover":"/images/angular-16.png","content":"<p>2023年05月03日，angular v16 正式发布。此次更新添加了<code>Signals</code>作为<code>angular</code>新的响应单元(<code>reactive primitive</code>)。<code>angular</code>的响应式系统依赖于<code>zone.js</code>。但是<code>zone.js</code>对于模型的变更没有提供更细粒度的信息通知。<code>zone.js</code>只能够通知到<code>angular</code>程序中什么时候某些东西可能发生了改变，但是没有给到更多的信息关于发生了什么或者什么东西改变了。这代表着以后的某个版本<code>zone.js</code>将被移除。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><h3 id=\"Signals-特性\"><a href=\"#Signals-特性\" class=\"headerlink\" title=\"Signals 特性\"></a><code>Signals</code> 特性</h3><ul>\n<li>能够通知 <code>Angular</code> 有关影响各个组件的模型更改。</li>\n<li>能够提供对模型的同步访问。</li>\n<li>读取值的时候无副作用。</li>\n<li>_glitch fre_e：读取值永远不应该返回不一致的状态。</li>\n<li>依赖性跟踪应该符合工程学。</li>\n</ul></blockquote>\n<h3 id=\"Signals-定义\"><a href=\"#Signals-定义\" class=\"headerlink\" title=\"Signals 定义\"></a><code>Signals</code> 定义</h3><p><code>Signals</code> 是值的包装，它能够在值发生变更的时候通知到相应的消费者。<code>Signals</code> 有多种类型。</p>\n<p>一些 <code>Signals</code> 可以通过 <code>mutation Api</code> 直接改变值，这些被称为 <code>writable signals</code>。模型的变更总是通过更改一个或者多个<code>writable signals</code>。</p>\n<p>由于读取<code>signal</code>是通过<code>getter</code>而不是访问普通变量或者值，所以<code>signal</code>可以知道他们在哪里被读取了。而且突变总是通过<code>mutation Api</code>完成的，所以<code>Signals</code>知道什么时候发生变更，并通知消费者有关变更的信息。</p>\n<h3 id=\"Computed\"><a href=\"#Computed\" class=\"headerlink\" title=\"Computed\"></a><code>Computed</code></h3><p><code>computed signal</code> 不能直接改变，而是根据其他<code>sinals</code>的变化而变更，（类比<code>vue</code>的计算属性）。</p>\n<h3 id=\"Effects\"><a href=\"#Effects\" class=\"headerlink\" title=\"Effects\"></a><code>Effects</code></h3><p>当 <code>Signals</code> 发生变更后会通知消费者，当<code>signals</code>发生变更后执行的操作称为<code>effect</code>。例如当组件模板中的使用的<code>signals</code>发生变更时，angular会通过<code>effect</code>更新视图ui。</p>\n<h3 id=\"Automatic-Dependency-Tracking\"><a href=\"#Automatic-Dependency-Tracking\" class=\"headerlink\" title=\"Automatic Dependency Tracking\"></a><code>Automatic Dependency Tracking</code></h3><p>当<code>computed signals </code>和<code>effect</code>运行时，它们会跟踪哪些<code>signals</code>被读取作为<code>computed</code>或<code>effect</code>函数的一部分。了解依赖关系允许<code>signal</code>系统在任何<code>Signals</code>依赖关系发生变化时自动重新运行<code>computation</code>或<code>effect</code>函数。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><h3 id=\"Signals-优点\"><a href=\"#Signals-优点\" class=\"headerlink\" title=\"Signals 优点\"></a><code>Signals</code> 优点</h3><ul>\n<li>框架可以追踪模板中访问了那些<code>signals</code>，可以获取关于哪些组件被模型中的数据改变所影响的更细粒度的信息。</li>\n<li><code>Signals</code> 可以同步获取到他们的值。</li>\n<li>读值不会造成副作用。</li>\n<li>现代<code>Signals</code>实现是<a href=\"https://en.wikipedia.org/wiki/Reactive_programming#Glitches\">无故障的</a>，并且不会向用户暴露不一致的状态。</li>\n<li><code>Signals</code>实现可以自动跟踪依赖关系。</li>\n<li><code>Signals</code>可以在任何地方使用，而不仅仅是在组件中，这与 Angular 的依赖注入系统配合得很好。</li>\n<li>计算<code>Signals</code>可以是<code>lazy</code>，并且仅根据需要重新计算中间值。</li>\n<li>开发人员需要学习的概念相对较少。</li>\n<li>它们很容易与其他反应性系统组合，包括 RxJS 和 Angular 当前基于区域的反应性。</li>\n</ul></blockquote>\n<h3 id=\"Signals-集成\"><a href=\"#Signals-集成\" class=\"headerlink\" title=\"Signals 集成\"></a><code>Signals</code> 集成</h3><div class=\"custom-quote danger\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M19.76 5.23C15.84 5.23 12 2 12 2C12 2 8.15996 5.23 4.23996 5.23C4.23996 5.23 1.86996 16.99 12 22C22.13 16.99 19.76 5.23 19.76 5.23Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 16H12\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">WARNING</p>\n<p>由于zone.js和 <code>signals</code>基于不同的数据在应用程序中流经的不同的假设，而且使用<code>zone.js</code>编写的代码如果没有<code>zone.js</code>可能会无法运行。<br>所以暂时不会移除<code>zone.js</code>，而是共存。</p>\n</div>\n<p>与 zone.js 不同，<code>Signals</code>提供有关模型的哪些部分已更改的细粒度信息，基于<code>Signals</code>的组件不参与全局更改检测。相反，Angular 知道组件模板的不同部分使用了哪些<code>Signals</code>，并且仅在<code>Signals</code>更改时将该组件与 DOM 同步。</p>\n<p>当且仅当模板中读取的<code>Signals</code>通知 Angular 它已更改时，才会安排组件的更改检测。</p>\n<p>事实上，在当前的设计中，这种更改检测将针对组件内的每个视图独立发生。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><h3 id=\"局部变化检测的粒度\"><a href=\"#局部变化检测的粒度\" class=\"headerlink\" title=\"局部变化检测的粒度\"></a>局部变化检测的粒度</h3><ul>\n<li>整个应用程序：立即处理整个应用程序（zone.js 的作用，OnPush 优化除外）。</li>\n<li>组件树：遍历各个子树（单个组件及其子组件）</li>\n<li>单个组件：检查组件（包括其所有视图），但不检查其子组件</li>\n<li>视图：单独检查每个视图</li>\n<li>DOM 元素：单独更新每个 DOM 元素的所有绑定（文本节点、元素等。SolidJS 在这个级别工作）</li>\n<li>绑定：单独更新每个 DOM 绑定</li>\n</ul></blockquote>\n","text":"2023年05月03日，angular v16 正式发布。此次更新添加了Signals作为angular新的响应单元(reactive primitive)。angular的响应式系统依赖于zone.js。但是zone.js对于模型的变更没有提供更细粒度的信息通知。zone.js...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"FRONTEND","slug":"FRONTEND","count":6,"path":"api/categories/FRONTEND.json"}],"tags":[{"name":"angular","slug":"angular","count":3,"path":"api/tags/angular.json"},{"name":"news","slug":"news","count":1,"path":"api/tags/news.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Signals-%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">Signals 特性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Signals-%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">Signals 定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Computed\"><span class=\"toc-text\">Computed</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Effects\"><span class=\"toc-text\">Effects</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Automatic-Dependency-Tracking\"><span class=\"toc-text\">Automatic Dependency Tracking</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Signals-%E4%BC%98%E7%82%B9\"><span class=\"toc-text\">Signals 优点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Signals-%E9%9B%86%E6%88%90\"><span class=\"toc-text\">Signals 集成</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B1%80%E9%83%A8%E5%8F%98%E5%8C%96%E6%A3%80%E6%B5%8B%E7%9A%84%E7%B2%92%E5%BA%A6\"><span class=\"toc-text\">局部变化检测的粒度</span></a></li></ol>","author":{"name":"Kidwen","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/38277891?v=4","link":"/","description":"Frontend","socials":{"github":"https://github.com/kidwen","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"gulp","uid":"50eebbead438db6dedc794be2c425ee4","slug":"tools/gulp","date":"2023-07-10T10:00:00.000Z","updated":"2023-07-10T10:27:48.926Z","comments":true,"path":"api/articles/tools/gulp.json","keywords":null,"cover":"/images/gulp.png","text":"利用 gulp 和 JavaScript 的灵活性来自动执行缓慢、重复的工作流程，并将其组合成高效的构建管道。 ","link":"","photos":[],"count_time":{"symbolsCount":56,"symbolsTime":"1 mins."},"categories":[{"name":"TOOL","slug":"TOOL","count":4,"path":"api/categories/TOOL.json"}],"tags":[{"name":"build","slug":"build","count":2,"path":"api/tags/build.json"}],"author":{"name":"Kidwen","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/38277891?v=4","link":"/","description":"Frontend","socials":{"github":"https://github.com/kidwen","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}