{"title":"webpack","uid":"e45789ed6a6c4dccaf366d2080a7ca21","slug":"tools/webpack","date":"2023-03-20T04:13:22.000Z","updated":"2023-07-10T10:27:48.562Z","comments":true,"path":"api/articles/tools/webpack.json","keywords":null,"cover":"/images/webpack.svg","content":"<p>Webpack is a module bundler. Its main purpose is to bundle JavaScript files for usage in a browser, yet it is also capable of transforming, bundling, or packaging just about any resource or asset.</p>\n<h2 id=\"Config\"><a href=\"#Config\" class=\"headerlink\" title=\"Config\"></a>Config</h2><details class=\"custom-details\">\n<summary>Check what you want to copy to your config file</summary>\n<p><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><div class=\"caption\"><span>webpack.config.js</span><a href=\"/downloads/code/webpack.config.js\">view raw</a></div><code class=\"language-javascript\">const path &#x3D; require(&#39;path&#39;);\nmodule.exports &#x3D; {\n    &#x2F;&#x2F; entry 表示入口，Webpack 执行构建的第一步将从 Entry 开始，可抽象成输入\n    &#x2F;&#x2F; 类型可以是 string、object、array\n    entry: &#39;.&#x2F;app&#x2F;entry&#39;, &#x2F;&#x2F; 只有 1 个入口，入口只有 1 个文件\n    entry: [&#39;.&#x2F;app&#x2F;entry1&#39;, &#39;.&#x2F;app&#x2F;entry2&#39;], &#x2F;&#x2F; 只有 1 个入口，入口有两个文件\n    entry: { &#x2F;&#x2F; 有两个入口\n        a: &#39;.&#x2F;app&#x2F;entry-a&#39;,\n        b: [&#39;.&#x2F;app&#x2F;entry-b1&#39;, &#39;.&#x2F;app&#x2F;entry-b2&#39;]\n    },\n    &#x2F;&#x2F; 如何输出结果：在 webpack 经过一系列处理后，如何输出最终想要的代码\n    output: {\n        &#x2F;&#x2F; 输出文件存放的目录，必须是 string 类型的绝对路径\n        path: path.resolve(__dirname, &#39;dist&#39;),\n        &#x2F;&#x2F; 输出文件的名称\n        filename: &#39;bundle.js&#39;, &#x2F;&#x2F; 完整的名称\n        filename: &#39;[name].js&#39;, &#x2F;&#x2F; 在配置了多个 entry 时，通过名称模板为不同的 entry 生成不同的文件名称\n        filename: &#39;[chunkhash].js&#39;, &#x2F;&#x2F; 根据文件内容的 hash 值生成文件的名称，用于浏览器长期缓存文件\n        &#x2F;&#x2F; 发布到线上的所有资源的 URL 前缀，为 string 类型\n        publicPath: &#39;&#x2F;assets&#x2F;&#39;, &#x2F;&#x2F; 放到指定目录下\n        publicPath: &#39;&#39;, &#x2F;&#x2F; 放到根目录下\n        publicPath: &#39;https:&#x2F;&#x2F;cdn.example.com&#39;, &#x2F;&#x2F; 放到 CDN 上\n        &#x2F;&#x2F; 导出库的名称，为 string 类型\n        &#x2F;&#x2F; 不填它时，默认的输出格式是匿名的立即执行函数\n        library: &#39;MyLibrary&#39;,\n        &#x2F;&#x2F; 导出库的类型，为枚举类型，默认是 var\n        &#x2F;&#x2F; 可以是 umd、umd2、commonjs、commonjs2、amd、this、var、assign、window、global、jsonp\n        libraryTarget: &#39;umd&#39;,\n        &#x2F;&#x2F; 是否包含有用的文件路径信息到生成的代码里，为 boolean 类型\n        pathinfo: true,\n        &#x2F;&#x2F; 附加 Chunk 的文件名称\n        chunkFilename: &#39;[id].js&#39;,\n        chunkFilename: &#39;[chunkhash].js&#39;,\n        &#x2F;&#x2F; JSONP 异步加载资源时的回调函数名称，需要和服务端搭配使用\n        jsonpFunction: &#39;myWebpackJsonp&#39;,\n        &#x2F;&#x2F; 生成的 Source Map 文件的名称\n        sourceMapFilename: &#39;[file].map&#39;,\n        &#x2F;&#x2F; 浏览器开发工具里显示的源码模块名称\n        devtoolModuleFilenameTemplate: &#39;webpack:&#x2F;&#x2F;&#x2F;[resource-path]&#39;,\n        &#x2F;&#x2F; 异步加载跨域的资源时使用的方式\n        crossOriginLoading: &#39;use-credentials&#39;,\n        crossOriginLoading: &#39;anonymous&#39;,\n        crossOriginLoading: false\n    },\n    &#x2F;&#x2F; 配置模块相关\n    module: {\n        rules: [ &#x2F;&#x2F; 配置 Loader\n            {\n                test: &#x2F;\\.jsx?$&#x2F;, &#x2F;&#x2F; 正则匹配命中要使用 Loader 的文件\n                include: [ &#x2F;&#x2F; 只会命中这里面的文件\n                    path.resolve(__dirname, &#39;app&#39;)\n                ],\n                exclude: [ &#x2F;&#x2F; 忽略这里面的文件\n                    path.resolve(__dirname, &#39;app&#x2F;demo-files&#39;)\n                ],\n                use: [ &#x2F;&#x2F; 使用哪些 Loader，有先后次序，从后向前执行\n                    &#39;style-loader&#39;, &#x2F;&#x2F; 直接使用 Loader 的名称\n                    {\n                        loader: &#39;css-loader&#39;,\n                        options: { &#x2F;&#x2F; 向 html-loader 传一些参数\n                        }\n                    }\n                ]\n            },\n        ],\n        noParse: [ &#x2F;&#x2F; 不用解析和处理的模块\n            &#x2F;special-library\\.js$&#x2F; &#x2F;&#x2F; 用正则匹配\n        ]\n    },\n    &#x2F;&#x2F; 配置插件\n    plugins: [],\n    &#x2F;&#x2F; 配置寻找模块的规则\n    resolve: {\n        modules: [ &#x2F;&#x2F; 寻找模块的根目录，为 array 类型，默认以 node_modules 为跟目录\n            &#39;node_modules&#39;,\n            path.resolve(__dirname, &#39;app&#39;)\n        ],\n        extensions: [&#39;.js&#39;, &#39;.json&#39;, &#39;.jsx&#39;, &#39;.css&#39;], &#x2F;&#x2F; 模块的后缀名\n        alias: { &#x2F;&#x2F; 模块别名配置，用于映射模块\n            &#x2F;&#x2F; 将 &#39;module&#39; 映射成 &#39;new-module&#39;，同样，&#39;module&#x2F;path&#x2F;file&#39; 也会映射成 &#39;new-module&#x2F;path&#x2F;file&#39;\n            &#39;module&#39;: &#39;new-module&#39;,\n            &#x2F;&#x2F; 使用结尾符号$后，将 &#39;only-module&#39; 映射成 &#39;new-module&#39;,\n            &#x2F;&#x2F; 但不像上面的，&#39;module&#x2F;path&#x2F;file&#39; 不会映射成 &#39;new-module&#x2F;path&#x2F;file&#39;\n            &#39;only-module$&#39;: &#39;new-module&#39;\n        },\n        alias: [ &#x2F;&#x2F; alias 还支持使用数组来更详细地进行配置\n            {\n                name: &#39;module&#39;, &#x2F;&#x2F; 老模块\n                alias: &#39;new-module&#39;, &#x2F;&#x2F; 新模块\n                &#x2F;&#x2F; 是否只映射模块，如果是 true ，则只有 &#39;module&#39; 会被映射；如果是 false ，则 &#39;module&#x2F;inner&#x2F;path&#39; 也会被映射\n                onlyModule: true\n            }\n        ],\n        symlinks: true, &#x2F;&#x2F; 是否根随文件的软链接去搜寻模块的路径\n        descriptionFiles: [&#39;package.json&#39;], &#x2F;&#x2F; 模块的描述文件\n        mainFields: [&#39;main&#39;], &#x2F;&#x2F; 模块的描述文件里描述入口的文件的字段名\n        enforceExtension: false, &#x2F;&#x2F; 是否强制导入语句写明文件\n    },\n    &#x2F;&#x2F; 输出文件的性能检查配置\n    performance: {\n        hints: &#39;warning&#39;, &#x2F;&#x2F; 有性能问题时输出警告\n        hints: &#39;error&#39;, &#x2F;&#x2F; 有性能问题时输出错误\n        hints: false, &#x2F;&#x2F; 关闭性能检查\n        maxAssetSize: 200000, &#x2F;&#x2F; 最大文件的大小（单位为 bytes）\n        maxEntryPointSize: 400000, &#x2F;&#x2F; 最大入口文件的大小（单位为 bytes）\n        assetFilter: function(assetFilename) { &#x2F;&#x2F; 过滤要检查的文件\n            return assetFilename.endsWith(&#39;.css&#39;) || assetFilename.endsWith(&#39;.js&#39;);\n        }\n    },\n    devtool: &#39;source-map&#39;, &#x2F;&#x2F; 配置 source-map 类型\n    context: __dirname, &#x2F;&#x2F; Webpack 使用的根目录，string 类型必须是绝对路径\n    &#x2F;&#x2F; 配置输出代码的运行环境\n    target: &#39;web&#39;, &#x2F;&#x2F; 浏览器，默认\n    target: &#39;webworker&#39;, &#x2F;&#x2F; WebWorker\n    target: &#39;node&#39;, &#x2F;&#x2F; Node.js，使用 &#96;require&#96; 语句加载 Chunk 代码\n    target: &#39;async-node&#39;, &#x2F;&#x2F; Node.js，异步加载 Chunk 代码\n    target: &#39;node-webkit&#39;, &#x2F;&#x2F; nw.js\n    target: &#39;electron-main&#39;, &#x2F;&#x2F; electron，主线程\n    target: &#39;electron-renderer&#39;, &#x2F;&#x2F; electron，渲染线程\n    externals: { &#x2F;&#x2F; 使用来自 JavaScript 运行环境提供的全局变量\n        jquery: &#39;jQuery&#39;\n    },\n    stats: { &#x2F;&#x2F; 控制台输出日志控制\n        assets: true,\n        colors: true,\n        errors: true,\n        errorDetails: true,\n        hash: true\n    },\n    devServer: { &#x2F;&#x2F; DevServer 相关的配置\n        proxy: { &#x2F;&#x2F; 代理到后端服务接口\n            &#39;&#x2F;api&#39;: &#39;http:&#x2F;&#x2F;localhost:3000&#39;\n        },\n        contentBase: path.join(__dirname, &#39;public&#39;), &#x2F;&#x2F; 配置 DevServer HTTP 服务器的文件根目录\n        compress: true, &#x2F;&#x2F; 是否开启 Gzip 压缩\n        historyApiFallback: true, &#x2F;&#x2F; 是否开发 HTML5 History API 网页\n        hot: true, &#x2F;&#x2F; 是否开启模块热替换功能\n        https: false, &#x2F;&#x2F; 是否开启 HTTPS 模式\n        profile: true, &#x2F;&#x2F; 是否捕捉 Webpack 构建的性能信息，用于分析是什么原因导致构建性能不佳\n        cache: false, &#x2F;&#x2F; 是否启用缓存来提升构建速度\n        watch: true, &#x2F;&#x2F; 是否开始\n        watchOptions: { &#x2F;&#x2F; 监听模式选项\n            &#x2F;&#x2F; 不监听的文件或文件夹，支持正则匹配，默认为空\n            ignored: &#x2F;node_modules&#x2F;,\n            &#x2F;&#x2F; 监听到变化后，等 300ms 再执行动作，截流，防止文件更新太快导致重新编译频率太快。默认为 300ms\n            aggregateTimeout: 300,\n            &#x2F;&#x2F; 不停的询问系统指定的文件有没有发生变化，默认每秒询问 1000 次\n            poll: 1000\n        }\n    },\n}</code></pre>\n</p>\n</details>\n","text":"Webpack is a module bundler. Its main purpose is to bundle JavaScript files for ...","link":"","photos":[],"count_time":{"symbolsCount":"7.4k","symbolsTime":"7 mins."},"categories":[{"name":"TOOL","slug":"TOOL","count":7,"path":"api/categories/TOOL.json"}],"tags":[{"name":"build","slug":"build","count":2,"path":"api/tags/build.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Config\"><span class=\"toc-text\">Config</span></a></li></ol>","author":{"name":"Kidwen","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/38277891?v=4","link":"/","description":"Frontend","socials":{"github":"https://github.com/kidwen","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"terminal proxy","uid":"99549990e3a692a5bd343420bd9e2a64","slug":"proxy/powershell","date":"2023-03-20T08:10:22.000Z","updated":"2023-07-31T08:28:56.972Z","comments":true,"path":"api/articles/proxy/powershell.json","keywords":null,"cover":"/images/terminal.png","text":"terminal is a task automation and configuration management program from Microsof...","link":"","photos":[],"count_time":{"symbolsCount":519,"symbolsTime":"1 mins."},"categories":[{"name":"PROXY","slug":"PROXY","count":4,"path":"api/categories/PROXY.json"}],"tags":[{"name":"terminal","slug":"terminal","count":1,"path":"api/tags/terminal.json"}],"author":{"name":"Kidwen","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/38277891?v=4","link":"/","description":"Frontend","socials":{"github":"https://github.com/kidwen","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"develope with hexo","uid":"234ca5fd8ee7c41e1376bd4bc2b2e5c4","slug":"hexo","date":"2023-03-15T08:10:22.000Z","updated":"2023-08-30T01:02:33.868Z","comments":true,"path":"api/articles/hexo.json","keywords":null,"cover":"/images/blog.jpg","text":"Welcome to Hexo! This is your very first post. Check documentation for more info...","link":"","photos":[],"count_time":{"symbolsCount":904,"symbolsTime":"1 mins."},"categories":[{"name":"TOOL","slug":"TOOL","count":7,"path":"api/categories/TOOL.json"}],"tags":[{"name":"doc","slug":"doc","count":1,"path":"api/tags/doc.json"}],"author":{"name":"Kidwen","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/38277891?v=4","link":"/","description":"Frontend","socials":{"github":"https://github.com/kidwen","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}