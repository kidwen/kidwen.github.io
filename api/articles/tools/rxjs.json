{"title":"rxjs","uid":"9170303394444f49789e30f6c5748970","slug":"tools/rxjs","date":"2023-07-10T02:30:00.000Z","updated":"2023-07-10T02:38:46.329Z","comments":true,"path":"api/articles/tools/rxjs.json","keywords":null,"cover":"/images/rxjs.png","content":"<p>RxJS is a library for composing asynchronous and event-based programs by using observable sequences. It provides one core type, the Observable, satellite types (Observer, Schedulers, Subjects) and operators inspired by Array methods (map, filter, reduce, every, etc) to allow handling asynchronous events as collections.</p>\n<p>The essential concepts in RxJS which solve async event management are:</p>\n<ul>\n<li>Observable: represents the idea of an invokable collection of future values or events.</li>\n<li>Observer: is a collection of callbacks that knows how to listen to values delivered by the Observable.</li>\n<li>Subscription: represents the execution of an Observable, is primarily useful for cancelling the execution.</li>\n<li>Operators: are pure functions that enable a functional programming style of dealing with collections with &gt;       operations like map, filter, concat, reduce, etc.</li>\n<li>Subject: is equivalent to an EventEmitter, and the only way of multicasting a value or event to multiple Observers.</li>\n<li>Schedulers: are centralized dispatchers to control concurrency, allowing us to coordinate when computation happens on e.g. setTimeout or requestAnimationFrame or others.</li>\n</ul>\n","text":"RxJS is a library for composing asynchronous and event-based programs by using observable sequences. It provides one core type, the Observab...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"TOOL","slug":"TOOL","count":1,"path":"api/categories/TOOL.json"}],"tags":[{"name":"rxjs","slug":"rxjs","count":1,"path":"api/tags/rxjs.json"}],"toc":"","author":{"name":"Kidwen","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/38277891?v=4","link":"/","description":"Frontend","socials":{"github":"https://github.com/kidwen","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"响应式主题","uid":"26df78b12ea8461da2d0f20e21f4a6a9","slug":"frontend/theming","date":"2023-06-15T05:30:00.000Z","updated":"2023-06-26T00:30:29.342Z","comments":true,"path":"api/articles/frontend/theming.json","keywords":null,"cover":"/images/theming.jpeg","text":"将页面自适应匹配用户的喜好，例如黑色模式 可以调整网站的展示以匹配用户的喜好。首先，需要知道如何借力浏览器来增加网站曝光从而提高品牌知名度。 自定义浏览器界面一些浏览器可以允许基于网站的调色板设置一个主题颜色。然后浏览器界面会自适应设置后的颜色。在页面head中名为theme-c...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"FRONTEND","slug":"FRONTEND","count":6,"path":"api/categories/FRONTEND.json"}],"tags":[{"name":"theming","slug":"theming","count":1,"path":"api/tags/theming.json"}],"author":{"name":"Kidwen","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/38277891?v=4","link":"/","description":"Frontend","socials":{"github":"https://github.com/kidwen","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}